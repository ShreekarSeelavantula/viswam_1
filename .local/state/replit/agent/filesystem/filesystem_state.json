{"file_contents":{"app.py":{"content":"import streamlit as st\nimport json\nimport os\nfrom utils.auth import check_authentication, initialize_session\nfrom utils.db import initialize_database, get_database_stats\nfrom utils.sample_data import initialize_sample_data\n\n# Page configuration\nst.set_page_config(\n    page_title=\"üå∏ Utsav Kathalu AI\",\n    page_icon=\"ü™î\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\ndef main():\n    # Initialize database and session\n    initialize_database()\n    initialize_session()\n    \n    # Custom CSS for Indian cultural theme\n    st.markdown(\"\"\"\n    <style>\n    .main-header {\n        text-align: center;\n        color: #D4AF37;\n        font-size: 3rem;\n        margin-bottom: 2rem;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n    }\n    .subtitle {\n        text-align: center;\n        color: #8B4513;\n        font-size: 1.2rem;\n        margin-bottom: 3rem;\n        font-style: italic;\n    }\n    .feature-card {\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        margin: 1rem 0;\n        border-left: 5px solid #FF6B35;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .welcome-box {\n        background: linear-gradient(135deg, #FFE4B5 0%, #DEB887 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        text-align: center;\n        margin: 2rem 0;\n        border: 2px solid #D4AF37;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Main header\n    st.markdown('<h1 class=\"main-header\">üå∏ Utsav Kathalu AI ü™î</h1>', unsafe_allow_html=True)\n    st.markdown('<p class=\"subtitle\">Multilingual Festival Story Collector - Preserving India\\'s Cultural Heritage</p>', unsafe_allow_html=True)\n    \n    # Check if user is logged in\n    if not st.session_state.get('logged_in', False):\n        show_welcome_page()\n    else:\n        show_dashboard()\n\n# Remove the public library homepage function since we don't need it\n\ndef show_welcome_page():\n    \"\"\"Display welcome page for non-authenticated users\"\"\"\n    \n    st.markdown(\"\"\"\n    <div class=\"welcome-box\">\n        <h2>üôè Welcome to Utsav Kathalu AI</h2>\n        <p>Share your beautiful festival stories and help preserve India's rich cultural heritage for future generations.</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Features section\n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h3>üé§ Voice & Text Stories</h3>\n            <p>Upload your festival stories through voice recordings or text input in multiple Indian languages.</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col2:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h3>ü§ñ AI Enhancement</h3>\n            <p>Our AI automatically cleans and enhances your stories while preserving their cultural authenticity.</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col3:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h3>üìñ Virtual Books</h3>\n            <p>Experience your stories as beautiful interactive virtual books with animations and images.</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    st.markdown(\"---\")\n    \n    # Call to action for non-logged users\n    col1, col2, col3 = st.columns([1, 2, 1])\n    with col2:\n        st.markdown(\"### Ready to share your festival stories?\")\n        if st.button(\"üé≠ Share Your Story\", type=\"primary\", use_container_width=True):\n            st.switch_page(\"pages/2_Auth.py\")\n        \n        st.markdown(\"### Already have an account?\")\n        if st.button(\"üîë Login\", use_container_width=True):\n            st.switch_page(\"pages/2_Auth.py\")\n        \n        st.markdown(\"---\")\n        st.markdown(\"**Note:** Login required to explore and contribute stories\")\n\ndef show_dashboard():\n    \"\"\"Display dashboard for authenticated users\"\"\"\n    user_data = st.session_state.get('user_data', {})\n    \n    st.markdown(f\"\"\"\n    <div class=\"welcome-box\">\n        <h2>üôè Namaste, {user_data.get('name', 'Friend')}!</h2>\n        <p>Welcome back to your story collection dashboard.</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Dashboard options\n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h3>üìö Explore Stories</h3>\n            <p>Browse festival stories from storytellers across India.</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n        if st.button(\"üåü Explore Stories\", type=\"primary\", use_container_width=True):\n            st.switch_page(\"pages/6_PublicBooks.py\")\n    \n    with col2:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h3>üìù Upload New Story</h3>\n            <p>Share a new festival story with voice or text input.</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n        if st.button(\"Upload Story\", use_container_width=True):\n            st.switch_page(\"pages/3_Upload.py\")\n    \n    with col3:\n        st.markdown(\"\"\"\n        <div class=\"feature-card\">\n            <h3>üìñ My Stories</h3>\n            <p>View and read your collection of festival stories.</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n        if st.button(\"View My Stories\", use_container_width=True):\n            # Check if user has stories before navigating\n            user_email = user_data.get('email', '')\n            if user_email:\n                from utils.db import get_user_stories\n                user_stories = get_user_stories(user_email)\n                if user_stories:\n                    st.switch_page(\"pages/4_VirtualBook.py\")\n                else:\n                    st.info(\"üìù No stories found. Upload your first festival story to get started!\")\n            else:\n                st.error(\"‚ùå User session error. Please login again.\")\n    \n    # User stats\n    from utils.db import get_user_stories\n    user_stories = get_user_stories(user_data.get('email', ''))\n    \n    st.markdown(\"---\")\n    st.markdown(\"### üìä Your Story Statistics\")\n    \n    col1, col2, col3 = st.columns(3)\n    with col1:\n        st.metric(\"Total Stories\", len(user_stories))\n    with col2:\n        languages = set([story.get('language', 'Unknown') for story in user_stories])\n        st.metric(\"Languages Used\", len(languages))\n    with col3:\n        festivals = set([story.get('festival', 'Unknown') for story in user_stories])\n        st.metric(\"Festivals Covered\", len(festivals))\n    \n    # Admin options (sample data initialization)\n    st.markdown(\"---\")\n    st.markdown(\"### üõ†Ô∏è Platform Management\")\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        if st.button(\"üìä View Analytics\"):\n            st.switch_page(\"pages/5_Analytics.py\")\n    \n    with col2:\n        if st.button(\"üé≠ Add Sample Data\"):\n            with st.spinner(\"Creating sample users and festival stories...\"):\n                success, message = initialize_sample_data()\n                if success:\n                    st.success(f\"‚úÖ {message}\")\n                    st.balloons()\n                    st.rerun()\n                else:\n                    st.error(f\"‚ùå {message}\")\n    \n    # Sample data info\n    stats = get_database_stats()\n    if stats['total_users'] > 0 or stats['total_stories'] > 0:\n        st.info(f\"üí° Platform has {stats['total_users']} users and {stats['total_stories']} stories. Visit Analytics to see detailed insights.\")\n    \n    # Logout option\n    st.markdown(\"---\")\n    if st.button(\"üö™ Logout\"):\n        for key in list(st.session_state.keys()):\n            del st.session_state[key]\n        st.rerun()\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":7703},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"openai>=1.97.1\",\n    \"pandas>=2.3.1\",\n    \"pillow>=11.3.0\",\n    \"streamlit>=1.47.1\",\n]\n","size_bytes":234},"replit.md":{"content":"# Utsav Kathalu AI - Multilingual Festival Story Collector\n\n## Overview\n\nUtsav Kathalu AI is a Streamlit-based web application designed to collect, curate, and display culturally rich festival stories from across India. The platform supports multilingual input through voice and text, uses AI for content enhancement, and presents stories in an interactive virtual book format. This open-source project aims to preserve Indian cultural heritage while building a clean Indic language corpus for research purposes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application follows a modular Streamlit architecture with a multi-page design pattern. The system is built around user authentication, story collection, AI-powered content processing, and an interactive story viewing experience.\n\n### Frontend Architecture\n- **Framework**: Streamlit with custom CSS styling\n- **Design Pattern**: Multi-page application using Streamlit's native page routing\n- **Theme**: Indian cultural design with warm colors (gold, brown, orange gradients)\n- **Pages**: Home, Authentication, Upload, and Virtual Book viewer\n- **UI Components**: Custom styled containers, forms, and interactive elements\n\n### Backend Architecture\n- **Language**: Python\n- **Web Framework**: Streamlit\n- **File Structure**: Modular utilities in separate files\n- **Session Management**: Streamlit's built-in session state\n- **Data Processing**: Synchronous processing with OpenAI API integration\n\n## Key Components\n\n### Authentication System (`utils/auth.py`)\n- **Purpose**: User registration, login, and session management\n- **Features**: Email validation, password hashing (SHA-256), user data persistence\n- **Data**: Supports Indian states and languages selection during registration\n- **Security**: Basic password requirements (minimum 6 characters)\n\n### Database Layer (`utils/db.py`)\n- **Type**: File-based JSON storage\n- **Structure**: Flat file system with separate directories for users and stories\n- **Files**: `users.json` for user data, individual JSON files for stories\n- **Operations**: CRUD operations for users and stories with error handling\n\n### Speech Processing (`utils/speech_to_text.py`)\n- **Service**: OpenAI Whisper API integration\n- **Functionality**: Audio file transcription with language support\n- **File Handling**: Temporary file management for audio processing\n- **Output**: Text transcription with error handling\n\n### Text Enhancement (`utils/text_cleaner.py`)\n- **Service**: OpenAI GPT-4o integration\n- **Purpose**: Grammar correction, cultural sensitivity, and text improvement\n- **Features**: Context-aware processing for festival stories\n- **Output**: Structured JSON response with improvements and cultural notes\n\n### Story Management\n- **Upload**: Multi-section story creation with image support\n- **Organization**: Section-based story structure with metadata\n- **Storage**: JSON format with base64 encoded images\n- **Retrieval**: User-specific story listing and loading\n\n## Data Flow\n\n1. **User Registration/Login**: User creates account ‚Üí Data stored in `users.json` ‚Üí Session initialized\n2. **Story Upload**: User selects input method ‚Üí Audio transcribed or text processed ‚Üí AI cleaning applied ‚Üí Story sections organized ‚Üí Saved to individual JSON files\n3. **Story Viewing**: User accesses virtual book ‚Üí Stories loaded from JSON files ‚Üí Interactive book interface displayed\n4. **AI Processing**: Raw content ‚Üí OpenAI API ‚Üí Enhanced content ‚Üí Structured output\n\n## External Dependencies\n\n### AI Services\n- **OpenAI API**: Primary dependency for Whisper (speech-to-text) and GPT-4o (text enhancement)\n- **API Key Management**: Environment variable based configuration\n- **Models**: whisper-1 for transcription, gpt-4o for text processing\n\n### Python Libraries\n- **Streamlit**: Web application framework and UI components\n- **OpenAI**: Official API client for AI services\n- **PIL (Pillow)**: Image processing and manipulation\n- **Standard Libraries**: json, os, hashlib, datetime, uuid, tempfile, base64\n\n### File System Dependencies\n- **Local Storage**: JSON files for data persistence\n- **Directory Structure**: Organized data and stories folders\n- **File Formats**: JSON for structured data, base64 for image encoding\n\n## Deployment Strategy\n\n### Target Platforms\n- **Primary**: Replit (development and hosting)\n- **Secondary**: Hugging Face Spaces (alternative deployment)\n- **Compatibility**: Designed for cloud-based Python environments\n\n### Configuration Requirements\n- **Environment Variables**: OpenAI API key configuration\n- **File Permissions**: Read/write access to data directories\n- **Dependencies**: Requirements for Streamlit, OpenAI, and image processing libraries\n\n### Scalability Considerations\n- **Current Limitation**: File-based storage suitable for small to medium user bases\n- **Future Enhancement**: Ready for database migration (Postgres compatible)\n- **Performance**: Synchronous processing may require optimization for high traffic\n\n### Security Considerations\n- **Authentication**: Basic email/password system with hashed storage\n- **API Keys**: Environment variable protection\n- **Data Storage**: Local file system with JSON encoding\n- **Input Validation**: Basic email and password validation implemented\n\n## Recent Changes\n\n### Analytics Dashboard (2025-01-28)\n- Added comprehensive analytics page (`pages/5_Analytics.py`) showing:\n  - Platform overview metrics (users, stories, languages, festivals)\n  - Language and festival distribution charts\n  - Detailed user information with story counts\n  - Recent activity feed\n- Enhanced main dashboard with admin management features\n- Added sample data initialization system\n\n### Sample Data System (2025-01-28)\n- Created `utils/sample_data.py` with pre-populated festival stories\n- Added 4 sample users from different Indian states\n- Created 4 detailed festival stories (Diwali, Durga Puja, Navratri, Ganesh Chaturthi)\n- Stories include authentic cultural details, multiple sections, and AI enhancement data\n- One-click sample data population for demonstration\n\n### User Analytics Enhancement (2025-01-28)\n- Enhanced database statistics tracking\n- Added user registration date tracking\n- Improved story metadata collection\n- User activity monitoring and reporting\n\n### Replit Migration (2025-07-28)\n- Successfully migrated project from Replit Agent to standard Replit environment\n- Installed all required dependencies (streamlit, openai, pandas, pillow)\n- Created proper Streamlit configuration file (.streamlit/config.toml) for deployment\n- Fixed function naming conflict in VirtualBook page (renamed show_virtual_book to show_story_reader)\n- Enhanced security with proper client/server separation and environment variable protection\n- Application runs cleanly on port 5000\n\n### Upload System Redesign (2025-07-28)\n- Completely redesigned upload process to eliminate unnecessary API calls\n- Created streamlined 5-step workflow: Story Setup ‚Üí Input Method Selection ‚Üí Content Creation ‚Üí Image Upload ‚Üí Review & Save\n- Added voice input functionality with OpenAI Whisper transcription\n- Made AI enhancement completely optional to minimize API costs\n- Implemented dynamic section creation based on user selection (2-6 sections)\n- Added proper image upload system requiring 2+ images per section\n- Fixed virtual book display issues with proper image key matching\n- Fixed function naming conflict in VirtualBook page (renamed show_virtual_book to show_story_reader)\n- Enhanced security with proper client/server separation and environment variable protection\n- Application now runs cleanly on port 5000 with no LSP errors\n\n### Virtual Book Enhancement (2025-07-28)\n- **Core Feature Update**: Virtual Book Library now displays ALL stories from ALL users (not just user's own stories)\n- Implemented realistic book page-turning animation instead of PowerPoint-style transitions\n- Added enhanced image layout with top-left and bottom-right positioning in virtual books\n- Created voice playback functionality for stories created with voice input\n- Added comprehensive filtering by festival, language, state, and author\n- Enhanced story cards with author information and creation dates\n- Updated database functions to include user information in all stories\n- Improved navigation with animated page controls and progress tracking\n\n### Access Control Update (2025-07-28)\n- **Authentication Required**: All story exploration features now require user authentication\n- Created dedicated \"Explore Stories\" page accessible only to logged-in users\n- Updated main dashboard to include story exploration as primary feature for authenticated users\n- Fixed HTML content display issues - stories now show clean text instead of markup\n- Removed public access to virtual books - users must login to explore festival stories\n- Enhanced user flow: Welcome ‚Üí Login ‚Üí Dashboard with Explore/Upload/My Stories options","size_bytes":8960},"pages/1_Home.py":{"content":"import streamlit as st\n\n# Redirect to main app\nst.switch_page(\"app.py\")\n","size_bytes":72},"pages/2_Auth.py":{"content":"import streamlit as st\nfrom utils.auth import register_user, login_user, INDIAN_STATES, INDIAN_LANGUAGES\n\n# Page configuration\nst.set_page_config(\n    page_title=\"Authentication - Utsav Kathalu AI\",\n    page_icon=\"üîê\",\n    layout=\"wide\"\n)\n\ndef main():\n    st.markdown(\"\"\"\n    <style>\n    .auth-header {\n        text-align: center;\n        color: #D4AF37;\n        font-size: 2.5rem;\n        margin-bottom: 1rem;\n    }\n    .auth-container {\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        margin: 2rem 0;\n        border: 2px solid #D4AF37;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .form-section {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 10px;\n        margin: 1rem 0;\n        border-left: 4px solid #FF6B35;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    st.markdown('<h1 class=\"auth-header\">üîê Welcome to Utsav Kathalu AI</h1>', unsafe_allow_html=True)\n    \n    # Check if user is already logged in\n    if st.session_state.get('logged_in', False):\n        st.success(\"üéâ You are already logged in!\")\n        if st.button(\"üè† Go to Dashboard\"):\n            st.switch_page(\"app.py\")\n        if st.button(\"üö™ Logout\"):\n            for key in list(st.session_state.keys()):\n                del st.session_state[key]\n            st.rerun()\n        return\n    \n    # Authentication tabs\n    tab1, tab2 = st.tabs([\"üîë Login\", \"üìù Sign Up\"])\n    \n    with tab1:\n        show_login_form()\n    \n    with tab2:\n        show_signup_form()\n\ndef show_login_form():\n    \"\"\"Display login form\"\"\"\n    st.markdown('<div class=\"auth-container\">', unsafe_allow_html=True)\n    st.markdown(\"### üîë Login to Your Account\")\n    \n    with st.form(\"login_form\"):\n        st.markdown('<div class=\"form-section\">', unsafe_allow_html=True)\n        \n        email = st.text_input(\n            \"üìß Email Address\",\n            placeholder=\"Enter your email address\",\n            help=\"Use the email you registered with\"\n        )\n        \n        password = st.text_input(\n            \"üîí Password\",\n            type=\"password\",\n            placeholder=\"Enter your password\",\n            help=\"Enter your account password\"\n        )\n        \n        st.markdown('</div>', unsafe_allow_html=True)\n        \n        col1, col2, col3 = st.columns([1, 2, 1])\n        with col2:\n            submit_button = st.form_submit_button(\"üöÄ Login\", type=\"primary\", use_container_width=True)\n        \n        if submit_button:\n            if not email or not password:\n                st.error(\"‚ùå Please fill in all fields\")\n            else:\n                with st.spinner(\"Logging you in...\"):\n                    success, message = login_user(email, password)\n                    \n                    if success:\n                        st.success(f\"‚úÖ {message}\")\n                        st.balloons()\n                        st.rerun()\n                    else:\n                        st.error(f\"‚ùå {message}\")\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_signup_form():\n    \"\"\"Display signup form\"\"\"\n    st.markdown('<div class=\"auth-container\">', unsafe_allow_html=True)\n    st.markdown(\"### üìù Create Your Account\")\n    st.markdown(\"Join our community of storytellers and help preserve India's cultural heritage!\")\n    \n    with st.form(\"signup_form\"):\n        st.markdown('<div class=\"form-section\">', unsafe_allow_html=True)\n        st.markdown(\"**üë§ Personal Information**\")\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            name = st.text_input(\n                \"üìù Full Name *\",\n                placeholder=\"Enter your full name\",\n                help=\"Your name will be associated with your stories\"\n            )\n        \n        with col2:\n            email = st.text_input(\n                \"üìß Email Address *\",\n                placeholder=\"Enter your email address\",\n                help=\"This will be your login username\"\n            )\n        \n        password = st.text_input(\n            \"üîí Password *\",\n            type=\"password\",\n            placeholder=\"Create a secure password (min 6 characters)\",\n            help=\"Choose a strong password with at least 6 characters\"\n        )\n        \n        confirm_password = st.text_input(\n            \"üîí Confirm Password *\",\n            type=\"password\",\n            placeholder=\"Re-enter your password\",\n            help=\"Must match the password above\"\n        )\n        \n        st.markdown('</div>', unsafe_allow_html=True)\n        \n        st.markdown('<div class=\"form-section\">', unsafe_allow_html=True)\n        st.markdown(\"**üåç Cultural Information**\")\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            preferred_language = st.selectbox(\n                \"üó£Ô∏è Preferred Language *\",\n                options=INDIAN_LANGUAGES,\n                index=0,\n                help=\"Primary language for your stories\"\n            )\n        \n        with col2:\n            state = st.selectbox(\n                \"üìç State/UT *\",\n                options=INDIAN_STATES,\n                index=0,\n                help=\"Your state or union territory in India\"\n            )\n        \n        st.markdown('</div>', unsafe_allow_html=True)\n        \n        # Terms and conditions\n        st.markdown('<div class=\"form-section\">', unsafe_allow_html=True)\n        terms_agreed = st.checkbox(\n            \"‚úÖ I agree to the Terms of Service and Privacy Policy\",\n            help=\"By checking this, you agree to our terms and conditions\"\n        )\n        \n        newsletter = st.checkbox(\n            \"üìß Subscribe to updates about new features and cultural events\",\n            value=True,\n            help=\"Get notified about platform updates and cultural celebrations\"\n        )\n        st.markdown('</div>', unsafe_allow_html=True)\n        \n        col1, col2, col3 = st.columns([1, 2, 1])\n        with col2:\n            submit_button = st.form_submit_button(\"üéâ Create Account\", type=\"primary\", use_container_width=True)\n        \n        if submit_button:\n            # Validation\n            if not all([name, email, password, confirm_password, preferred_language, state]):\n                st.error(\"‚ùå Please fill in all required fields marked with *\")\n            elif password != confirm_password:\n                st.error(\"‚ùå Passwords do not match\")\n            elif not terms_agreed:\n                st.error(\"‚ùå Please agree to the Terms of Service and Privacy Policy\")\n            else:\n                with st.spinner(\"Creating your account...\"):\n                    success, message = register_user(name, email, password, preferred_language, state)\n                    \n                    if success:\n                        st.success(f\"‚úÖ {message}\")\n                        st.success(\"üéâ Welcome to Utsav Kathalu AI! Logging you in automatically...\")\n                        # Auto-login after successful registration\n                        login_success, login_message = login_user(email, password)\n                        if login_success:\n                            st.balloons()\n                            st.rerun()\n                        else:\n                            st.info(\"üëÜ Please switch to the Login tab to access your account.\")\n                    else:\n                        st.error(f\"‚ùå {message}\")\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_back_button():\n    \"\"\"Show back to home button\"\"\"\n    if st.button(\"üè† Back to Home\"):\n        st.switch_page(\"app.py\")\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":7659},"pages/3_Upload.py":{"content":"import streamlit as st\nfrom utils.auth import check_authentication, get_current_user\nfrom utils.db import save_story\nimport base64\nfrom PIL import Image\nimport io\nimport uuid\nfrom datetime import datetime\n\n# Page configuration\nst.set_page_config(\n    page_title=\"Upload Story - Utsav Kathalu AI\",\n    page_icon=\"üìù\",\n    layout=\"wide\"\n)\n\ndef main():\n    # Custom CSS\n    st.markdown(\"\"\"\n    <style>\n    .upload-header {\n        text-align: center;\n        color: #D4AF37;\n        font-size: 2.5rem;\n        margin-bottom: 1rem;\n    }\n    .section-container {\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        margin: 1rem 0;\n        border-left: 5px solid #FF6B35;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .step-header {\n        color: #8B4513;\n        font-size: 1.3rem;\n        font-weight: bold;\n        margin-bottom: 1rem;\n    }\n    .section-box {\n        background: #FFFEF7;\n        padding: 1.5rem;\n        border-radius: 10px;\n        border: 2px solid #D4AF37;\n        margin: 1rem 0;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Check authentication\n    if not check_authentication():\n        st.error(\"üîí Please login to upload stories\")\n        if st.button(\"üîë Go to Login\"):\n            st.switch_page(\"pages/2_Auth.py\")\n        return\n    \n    st.markdown('<h1 class=\"upload-header\">üìù Share Your Festival Story</h1>', unsafe_allow_html=True)\n    \n    user_data = get_current_user()\n    st.markdown(f\"**Storyteller:** {user_data.get('name', 'Friend')} | **Language:** {user_data.get('preferred_language', 'Hindi')}\")\n    \n    # Initialize session state\n    if 'upload_step' not in st.session_state:\n        st.session_state.upload_step = 1\n    \n    # Main upload flow\n    if st.session_state.upload_step == 1:\n        show_story_setup()\n    elif st.session_state.upload_step == 2:\n        show_input_method_selection()\n    elif st.session_state.upload_step == 3:\n        show_multi_section_input()\n    elif st.session_state.upload_step == 4:\n        show_image_upload_for_sections()\n    elif st.session_state.upload_step == 5:\n        show_final_review_and_save()\n\ndef show_story_setup():\n    \"\"\"Step 1: Story details and number of sections\"\"\"\n    st.markdown('<div class=\"section-container\">', unsafe_allow_html=True)\n    st.markdown('<div class=\"step-header\">üìù Step 1: Story Setup</div>', unsafe_allow_html=True)\n    \n    with st.form(\"story_setup\"):\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            title = st.text_input(\"üè∑Ô∏è Story Title\", placeholder=\"Give your story a beautiful title\")\n            festival = st.selectbox(\"üéä Festival\", [\n                \"Diwali\", \"Holi\", \"Dussehra\", \"Navratri\", \"Karva Chauth\", \"Raksha Bandhan\",\n                \"Eid\", \"Christmas\", \"Ganesh Chaturthi\", \"Krishna Janmashtami\", \"Durga Puja\",\n                \"Onam\", \"Pongal\", \"Baisakhi\", \"Makar Sankranti\", \"Other\"\n            ])\n            language = st.selectbox(\"üó£Ô∏è Language\", [\n                \"Hindi\", \"English\", \"Bengali\", \"Tamil\", \"Telugu\", \"Marathi\", \n                \"Gujarati\", \"Kannada\", \"Malayalam\", \"Punjabi\", \"Urdu\", \"Other\"\n            ])\n        \n        with col2:\n            story_type = st.selectbox(\"üìö Story Type\", [\n                \"Personal Experience\", \"Family Tradition\", \"Childhood Memory\",\n                \"Cultural Practice\", \"Religious Story\", \"Community Celebration\"\n            ])\n            \n            num_sections = st.selectbox(\"üìñ Number of Story Sections\", \n                options=[2, 3, 4, 5, 6], \n                help=\"How many parts/chapters does your story have?\"\n            )\n            \n        description = st.text_area(\"üìÑ Story Description\", \n            placeholder=\"Brief description of your festival story\",\n            height=100\n        )\n        \n        if st.form_submit_button(\"Next: Choose Input Method ‚û°Ô∏è\", type=\"primary\"):\n            if title and festival and description:\n                # Store story details in session\n                st.session_state.story_data = {\n                    'title': title,\n                    'festival': festival,\n                    'language': language,\n                    'story_type': story_type,\n                    'description': description,\n                    'num_sections': num_sections,\n                    'sections': [],\n                    'images': {}\n                }\n                st.session_state.upload_step = 2\n                st.rerun()\n            else:\n                st.error(\"Please fill in all required fields (Title, Festival, Description)\")\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_input_method_selection():\n    \"\"\"Step 2: Choose input method\"\"\"\n    st.markdown('<div class=\"section-container\">', unsafe_allow_html=True)\n    st.markdown('<div class=\"step-header\">üé§ Step 2: Choose Input Method</div>', unsafe_allow_html=True)\n    \n    story_data = st.session_state.story_data\n    \n    st.info(\"Choose how you want to input your story content. You can use text or voice input for each section.\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.markdown(\"\"\"\n        ### üìù Text Input\n        - Type your story directly\n        - Easy editing and formatting\n        - Perfect for detailed stories\n        \"\"\")\n        if st.button(\"üìù Use Text Input\", type=\"primary\", use_container_width=True):\n            st.session_state.story_data['input_method'] = 'text'\n            st.session_state.upload_step = 3\n            st.rerun()\n    \n    with col2:\n        st.markdown(\"\"\"\n        ### üé§ Voice Input\n        - Record your story by speaking\n        - Natural storytelling experience\n        - Includes voice playback in virtual book\n        \"\"\")\n        if st.button(\"üé§ Use Voice Input\", type=\"primary\", use_container_width=True):\n            st.session_state.story_data['input_method'] = 'voice'\n            st.session_state.upload_step = 3\n            st.rerun()\n    \n    # Back button\n    if st.button(\"‚¨ÖÔ∏è Back to Story Setup\"):\n        st.session_state.upload_step = 1\n        st.rerun()\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_multi_section_input():\n    \"\"\"Step 3: Input content for all sections\"\"\"\n    st.markdown('<div class=\"section-container\">', unsafe_allow_html=True)\n    st.markdown('<div class=\"step-header\">üìñ Step 3: Create Your Story Sections</div>', unsafe_allow_html=True)\n    \n    story_data = st.session_state.story_data\n    num_sections = story_data['num_sections']\n    input_method = story_data.get('input_method', 'text')\n    \n    if input_method == 'text':\n        st.info(f\"Please write your {num_sections} story sections below. Each section should be a complete part of your festival story.\")\n    else:\n        st.info(f\"Please record your {num_sections} story sections below. Speak naturally and we'll transcribe it for you.\")\n    \n    if input_method == 'text':\n        show_text_input_sections()\n    else:\n        show_voice_input_sections()\n\ndef show_text_input_sections():\n    \"\"\"Handle text input for sections\"\"\"\n    story_data = st.session_state.story_data\n    num_sections = story_data['num_sections']\n    \n    with st.form(\"story_sections\"):\n        sections = []\n        \n        for i in range(num_sections):\n            st.markdown(f'<div class=\"section-box\">', unsafe_allow_html=True)\n            st.markdown(f\"### üìù Section {i+1}\")\n            \n            section_title = st.text_input(\n                f\"Section {i+1} Title\", \n                placeholder=f\"Title for section {i+1}\",\n                key=f\"section_title_{i}\"\n            )\n            \n            section_content = st.text_area(\n                f\"Section {i+1} Content\",\n                placeholder=f\"Write the content for section {i+1} of your story...\",\n                height=150,\n                key=f\"section_content_{i}\"\n            )\n            \n            image_description = st.text_input(\n                f\"Image Description for Section {i+1}\",\n                placeholder=\"Describe what kind of image would go well with this section\",\n                key=f\"image_desc_{i}\"\n            )\n            \n            sections.append({\n                'title': section_title,\n                'content': section_content,\n                'image_description': image_description\n            })\n            \n            st.markdown('</div>', unsafe_allow_html=True)\n        \n        # AI Enhancement Option\n        use_ai_enhancement = st.checkbox(\n            \"ü§ñ Use AI Enhancement (Optional)\", \n            help=\"AI will improve grammar, cultural context, and story flow. This uses API credits.\"\n        )\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            if st.form_submit_button(\"‚¨ÖÔ∏è Back to Input Method\"):\n                st.session_state.upload_step = 2\n                st.rerun()\n        \n        with col2:\n            if st.form_submit_button(\"Next: Upload Images ‚û°Ô∏è\", type=\"primary\"):\n                # Validate sections\n                valid_sections = []\n                for i, section in enumerate(sections):\n                    if section['title'] and section['content']:\n                        valid_sections.append(section)\n                    else:\n                        st.error(f\"Please fill in title and content for Section {i+1}\")\n                        return\n                \n                if len(valid_sections) == num_sections:\n                    # Apply AI enhancement if requested\n                    if use_ai_enhancement:\n                        enhanced_sections = apply_ai_enhancement(valid_sections)\n                        st.session_state.story_data['sections'] = enhanced_sections\n                        st.session_state.story_data['ai_enhanced'] = True\n                    else:\n                        st.session_state.story_data['sections'] = valid_sections\n                        st.session_state.story_data['ai_enhanced'] = False\n                    \n                    st.session_state.upload_step = 4\n                    st.rerun()\n\ndef show_voice_input_sections():\n    \"\"\"Handle voice input for sections\"\"\"\n    story_data = st.session_state.story_data\n    num_sections = story_data['num_sections']\n    \n    st.info(\"üé§ Voice Recording Mode: Record each section by speaking into your microphone.\")\n    \n    sections = []\n    for i in range(num_sections):\n        st.markdown(f'<div class=\"section-box\">', unsafe_allow_html=True)\n        st.markdown(f\"### üé§ Section {i+1}\")\n        \n        section_title = st.text_input(\n            f\"Section {i+1} Title\", \n            placeholder=f\"Title for section {i+1}\",\n            key=f\"voice_section_title_{i}\"\n        )\n        \n        # Voice recording interface\n        audio_file = st.file_uploader(\n            f\"Record/Upload Audio for Section {i+1}\",\n            type=['wav', 'mp3', 'm4a', 'ogg'],\n            key=f\"voice_section_{i}\",\n            help=\"Record your story section or upload an audio file\"\n        )\n        \n        section_content = \"\"\n        if audio_file:\n            # Transcribe audio using speech-to-text\n            with st.spinner(f\"Transcribing Section {i+1}...\"):\n                try:\n                    from utils.speech_to_text import transcribe_audio_file\n                    section_content = transcribe_audio_file(audio_file)\n                    st.success(f\"‚úÖ Section {i+1} transcribed successfully!\")\n                    st.text_area(f\"Transcribed Content (Section {i+1}):\", \n                               value=section_content, height=100, key=f\"transcribed_{i}\")\n                except Exception as e:\n                    st.error(f\"Failed to transcribe audio: {str(e)}\")\n        \n        image_description = st.text_input(\n            f\"Image Description for Section {i+1}\",\n            placeholder=\"Describe what kind of image would go well with this section\",\n            key=f\"voice_image_desc_{i}\"\n        )\n        \n        audio_data = None\n        if audio_file:\n            audio_data = base64.b64encode(audio_file.getvalue()).decode()\n        \n        sections.append({\n            'title': section_title,\n            'content': section_content,\n            'image_description': image_description,\n            'audio_data': audio_data\n        })\n        \n        st.markdown('</div>', unsafe_allow_html=True)\n    \n    # AI Enhancement Option\n    use_ai_enhancement = st.checkbox(\n        \"ü§ñ Use AI Enhancement (Optional)\", \n        help=\"AI will improve grammar, cultural context, and story flow. This uses API credits.\"\n    )\n    \n    col1, col2 = st.columns(2)\n    with col1:\n        if st.button(\"‚¨ÖÔ∏è Back to Input Method\"):\n            st.session_state.upload_step = 2\n            st.rerun()\n    \n    with col2:\n        if st.button(\"Next: Upload Images ‚û°Ô∏è\", type=\"primary\"):\n            # Validate sections\n            valid_sections = []\n            for i, section in enumerate(sections):\n                if section['title'] and section['content']:\n                    valid_sections.append(section)\n                else:\n                    st.error(f\"Please provide title and record audio for Section {i+1}\")\n                    return\n            \n            if len(valid_sections) == num_sections:\n                # Apply AI enhancement if requested\n                if use_ai_enhancement:\n                    enhanced_sections = apply_ai_enhancement(valid_sections)\n                    st.session_state.story_data['sections'] = enhanced_sections\n                    st.session_state.story_data['ai_enhanced'] = True\n                else:\n                    st.session_state.story_data['sections'] = valid_sections\n                    st.session_state.story_data['ai_enhanced'] = False\n                \n                st.session_state.upload_step = 4\n                st.rerun()\n\ndef apply_ai_enhancement(sections):\n    \"\"\"Apply AI enhancement to story sections\"\"\"\n    enhanced_sections = []\n    \n    try:\n        from utils.text_cleaner import clean_and_correct_text\n        \n        for section in sections:\n            with st.spinner(f\"Enhancing: {section['title']}...\"):\n                enhanced_content = clean_and_correct_text(\n                    section['content'],\n                    f\"This is a section titled '{section['title']}' from a festival story.\"\n                )\n                \n                enhanced_sections.append({\n                    'title': section['title'],\n                    'content': enhanced_content.get('cleaned_text', section['content']),\n                    'image_description': section['image_description'],\n                    'audio_data': section.get('audio_data'),\n                    'ai_improvements': enhanced_content.get('improvements_made', [])\n                })\n        \n        st.success(\"‚úÖ AI enhancement completed!\")\n        return enhanced_sections\n        \n    except Exception as e:\n        st.error(f\"AI enhancement failed: {str(e)}. Using original content.\")\n        return sections\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            if st.form_submit_button(\"‚¨ÖÔ∏è Back to Input Method\"):\n                st.session_state.upload_step = 2\n                st.rerun()\n        \n        with col2:\n            if st.form_submit_button(\"Next: Upload Images ‚û°Ô∏è\", type=\"primary\"):\n                # Validate sections\n                valid_sections = []\n                for i, section in enumerate(sections):\n                    if section['title'] and section['content']:\n                        valid_sections.append(section)\n                    else:\n                        st.error(f\"Please fill in title and content for Section {i+1}\")\n                        return\n                \n                if len(valid_sections) == num_sections:\n                    st.session_state.story_data['sections'] = valid_sections\n                    st.session_state.upload_step = 3\n                    st.rerun()\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_image_upload_for_sections():\n    \"\"\"Step 4: Upload images for each section\"\"\"\n    st.markdown('<div class=\"section-container\">', unsafe_allow_html=True)\n    st.markdown('<div class=\"step-header\">üñºÔ∏è Step 4: Upload Images for Each Section</div>', unsafe_allow_html=True)\n    \n    story_data = st.session_state.story_data\n    sections = story_data['sections']\n    \n    st.info(\"Upload at least 2 images for each section. Images help bring your story to life!\")\n    \n    images = {}\n    \n    for i, section in enumerate(sections):\n        st.markdown(f'<div class=\"section-box\">', unsafe_allow_html=True)\n        st.markdown(f\"### üì∏ Images for Section {i+1}: {section['title']}\")\n        st.write(f\"**Image suggestion:** {section['image_description']}\")\n        \n        # Upload multiple images for this section\n        uploaded_files = st.file_uploader(\n            f\"Choose images for Section {i+1}\",\n            type=['png', 'jpg', 'jpeg'],\n            accept_multiple_files=True,\n            key=f\"images_section_{i}\"\n        )\n        \n        if uploaded_files:\n            if len(uploaded_files) >= 2:\n                st.success(f\"‚úÖ {len(uploaded_files)} images uploaded for Section {i+1}\")\n                # Store first 2 images (or first one if only one uploaded)\n                for j, uploaded_file in enumerate(uploaded_files[:2]):\n                    image = Image.open(uploaded_file)\n                    # Resize image if too large\n                    if image.size[0] > 800 or image.size[1] > 600:\n                        image.thumbnail((800, 600), Image.Resampling.LANCZOS)\n                    \n                    buffer = io.BytesIO()\n                    image.save(buffer, format=\"JPEG\", quality=85)\n                    image_base64 = base64.b64encode(buffer.getvalue()).decode()\n                    \n                    images[f\"section_{i+1}_image_{j+1}\"] = image_base64\n                    st.image(image, caption=f\"Section {i+1} - Image {j+1}\", width=200)\n            else:\n                st.warning(f\"Please upload at least 2 images for Section {i+1}\")\n        \n        st.markdown('</div>', unsafe_allow_html=True)\n    \n    # Navigation buttons\n    col1, col2 = st.columns(2)\n    with col1:\n        if st.button(\"‚¨ÖÔ∏è Back to Story Sections\"):\n            st.session_state.upload_step = 3\n            st.rerun()\n    \n    with col2:\n        if st.button(\"Next: Review & Save ‚û°Ô∏è\", type=\"primary\"):\n            # Check if all sections have at least 1 image\n            missing_images = []\n            for i in range(len(sections)):\n                section_images = [key for key in images.keys() if key.startswith(f\"section_{i+1}_\")]\n                if not section_images:\n                    missing_images.append(i+1)\n            \n            if missing_images:\n                st.error(f\"Please upload at least one image for sections: {', '.join(map(str, missing_images))}\")\n            else:\n                st.session_state.story_data['images'] = images\n                st.session_state.upload_step = 5\n                st.rerun()\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\ndef show_final_review_and_save():\n    \"\"\"Step 5: Review and save the story\"\"\"\n    st.markdown('<div class=\"section-container\">', unsafe_allow_html=True)\n    st.markdown('<div class=\"step-header\">üëÄ Step 5: Review & Save Your Story</div>', unsafe_allow_html=True)\n    \n    story_data = st.session_state.story_data\n    \n    # Show story summary\n    st.markdown(\"### üìñ Story Summary\")\n    col1, col2 = st.columns(2)\n    with col1:\n        st.write(f\"**Title:** {story_data['title']}\")\n        st.write(f\"**Festival:** {story_data['festival']}\")\n        st.write(f\"**Language:** {story_data['language']}\")\n    with col2:\n        st.write(f\"**Type:** {story_data['story_type']}\")\n        st.write(f\"**Sections:** {len(story_data['sections'])}\")\n        st.write(f\"**Images:** {len(story_data['images'])}\")\n    \n    st.write(f\"**Description:** {story_data['description']}\")\n    \n    # Show sections preview\n    st.markdown(\"### üìù Sections Preview\")\n    for i, section in enumerate(story_data['sections']):\n        with st.expander(f\"Section {i+1}: {section['title']}\"):\n            st.write(section['content'])\n            st.write(f\"**Image Description:** {section['image_description']}\")\n    \n    # Navigation and save\n    col1, col2 = st.columns(2)\n    with col1:\n        if st.button(\"‚¨ÖÔ∏è Back to Images\"):\n            st.session_state.upload_step = 4\n            st.rerun()\n    \n    with col2:\n        if st.button(\"üíæ Save Story\", type=\"primary\"):\n            # Save the story\n            user_data = get_current_user()\n            story_id = str(uuid.uuid4())\n            \n            # Prepare story data for saving\n            final_story = {\n                'story_id': story_id,\n                'user_email': user_data.get('email'),\n                'user_name': user_data.get('name'),\n                'title': story_data['title'],\n                'festival': story_data['festival'],\n                'language': story_data['language'],\n                'story_type': story_data['story_type'],\n                'description': story_data['description'],\n                'sections': story_data['sections'],\n                'images': story_data['images'],\n                'input_method': story_data.get('input_method', 'text'),\n                'created_at': datetime.now().isoformat(),\n                'updated_at': datetime.now().isoformat()\n            }\n            \n            # Save to database\n            success, story_id = save_story(user_data.get('email'), final_story)\n            \n            if success:\n                st.success(\"üéâ Story saved successfully!\")\n                st.balloons()\n                \n                # Clear session data\n                for key in ['story_data', 'upload_step']:\n                    if key in st.session_state:\n                        del st.session_state[key]\n                \n                # Navigation options\n                col1, col2 = st.columns(2)\n                with col1:\n                    if st.button(\"üìñ View My Story\", type=\"primary\"):\n                        st.session_state.selected_story_id = story_id\n                        st.switch_page(\"pages/4_VirtualBook.py\")\n                \n                with col2:\n                    if st.button(\"üìù Upload Another Story\"):\n                        st.rerun()\n            else:\n                st.error(f\"‚ùå Error saving story: {story_id}\")\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\nif __name__ == \"__main__\":\n    main()","size_bytes":22683},"pages/4_VirtualBook.py":{"content":"import streamlit as st\nfrom utils.auth import check_authentication, get_current_user\nfrom utils.db import get_user_stories, load_story\nimport base64\nimport json\n\n# Page configuration\nst.set_page_config(\n    page_title=\"Virtual Book - Utsav Kathalu AI\",\n    page_icon=\"üìñ\",\n    layout=\"wide\"\n)\n\ndef main():\n    \"\"\"Main virtual book interface\"\"\"\n    if not check_authentication():\n        st.warning(\"üîí Please login to access your stories.\")\n        if st.button(\"üîë Go to Login\"):\n            st.switch_page(\"pages/2_Auth.py\")\n        return\n    \n    user_data = get_current_user()\n    user_email = user_data.get('email', '')\n    \n    if not user_email:\n        st.error(\"‚ùå User session error. Please login again.\")\n        if st.button(\"üîë Go to Login\"):\n            st.switch_page(\"pages/2_Auth.py\")\n        return\n    \n    user_stories = get_user_stories(user_email)\n    \n    if not user_stories:\n        st.info(\"üìö No stories found yet!\")\n        st.markdown(\"### üåü Get Started\")\n        st.write(\"Ready to share your first festival story? Upload it now and watch it come to life as a beautiful virtual book!\")\n        \n        col1, col2, col3 = st.columns([1, 2, 1])\n        with col2:\n            if st.button(\"üìù Upload Your First Story\", type=\"primary\", use_container_width=True):\n                st.switch_page(\"pages/3_Upload.py\")\n                \n            if st.button(\"üé≠ Try Sample Stories\", use_container_width=True):\n                st.switch_page(\"app.py\")\n        return\n    \n    show_virtual_book(user_stories)\n\ndef show_virtual_book(user_stories):\n    \"\"\"Display the virtual book interface\"\"\"\n    # Custom CSS for book interface\n    st.markdown(\"\"\"\n    <style>\n    .book-header {\n        text-align: center;\n        color: #D4AF37;\n        font-size: 2.5rem;\n        margin-bottom: 1rem;\n    }\n    .book-container {\n        background: linear-gradient(135deg, #8B4513 0%, #D2691E 100%);\n        padding: 3rem;\n        border-radius: 20px;\n        margin: 2rem 0;\n        box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n        position: relative;\n    }\n    .book-page {\n        background: linear-gradient(135deg, #FFFEF7 0%, #FFF8DC 100%);\n        padding: 3rem;\n        border-radius: 15px;\n        min-height: 800px;\n        position: relative;\n        border: 1px solid #DEB887;\n        margin: 1rem 0;\n        display: grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-rows: auto 1fr auto;\n        gap: 1rem;\n        transform-style: preserve-3d;\n        backface-visibility: hidden;\n    }\n    .page-image-top {\n        grid-column: 1;\n        grid-row: 1;\n        max-width: 200px;\n        border-radius: 10px;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    }\n    .page-image-bottom {\n        grid-column: 3;\n        grid-row: 3;\n        max-width: 200px;\n        border-radius: 10px;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n        justify-self: end;\n    }\n    .page-content-center {\n        grid-column: 1 / -1;\n        grid-row: 2;\n        font-size: 1.1rem;\n        line-height: 1.8;\n        color: #2F4F4F;\n        text-align: justify;\n        padding: 1rem;\n    }\n    .page-turn-animation {\n        transform-style: preserve-3d;\n        transition: transform 0.8s ease-in-out;\n        transform-origin: left center;\n    }\n    \n    .page-turning {\n        animation: pageTurn 0.8s ease-in-out;\n    }\n    \n    @keyframes pageTurn {\n        0% { transform: perspective(1200px) rotateY(0deg); }\n        50% { transform: perspective(1200px) rotateY(-90deg); }\n        100% { transform: perspective(1200px) rotateY(0deg); }\n    }\n    \n    .page-shadow {\n        box-shadow: \n            inset 0 0 50px rgba(139,69,19,0.1),\n            0 20px 40px rgba(0,0,0,0.15),\n            inset -10px 0 20px rgba(0,0,0,0.05);\n    }\n    .voice-controls {\n        position: absolute;\n        top: 1rem;\n        right: 1rem;\n        background: rgba(255,255,255,0.9);\n        padding: 0.5rem;\n        border-radius: 10px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    }\n    .page-header {\n        color: #8B4513;\n        font-size: 2rem;\n        text-align: center;\n        margin-bottom: 2rem;\n        border-bottom: 2px solid #D4AF37;\n        padding-bottom: 1rem;\n    }\n    .page-content {\n        font-size: 1.1rem;\n        line-height: 1.8;\n        color: #2F4F4F;\n        text-align: justify;\n        margin-bottom: 2rem;\n    }\n    .page-number {\n        position: absolute;\n        bottom: 1rem;\n        right: 2rem;\n        color: #8B4513;\n        font-style: italic;\n    }\n    .book-navigation {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-top: 2rem;\n        padding: 1rem;\n        background: rgba(255,255,255,0.1);\n        border-radius: 10px;\n    }\n    .story-card {\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        margin: 1rem 0;\n        border-left: 5px solid #FF6B35;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        cursor: pointer;\n        transition: transform 0.3s ease;\n    }\n    .story-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 8px 15px rgba(0,0,0,0.2);\n    }\n    .book-cover {\n        background: linear-gradient(135deg, #4A90E2 0%, #7B68EE 50%, #FF6B6B 100%);\n        color: white;\n        padding: 4rem 2rem;\n        border-radius: 15px;\n        text-align: center;\n        box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n        margin: 2rem 0;\n    }\n    .cover-title {\n        font-size: 2.5rem;\n        font-weight: bold;\n        margin-bottom: 1rem;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n    }\n    .cover-subtitle {\n        font-size: 1.2rem;\n        opacity: 0.9;\n        margin-bottom: 2rem;\n    }\n    .cover-details {\n        font-size: 1rem;\n        opacity: 0.8;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Check authentication\n    if not check_authentication():\n        st.error(\"üîí Please login to view virtual books\")\n        if st.button(\"üîë Go to Login\"):\n            st.switch_page(\"pages/2_Auth.py\")\n        return\n    \n    st.markdown('<h1 class=\"book-header\">üìñ My Story Library - Your Festival Stories</h1>', unsafe_allow_html=True)\n    \n    # Check if a specific story is selected\n    if 'selected_story_id' in st.session_state:\n        show_story_reader()\n    else:\n        show_story_library()\n\ndef show_story_library():\n    \"\"\"Display user's own stories\"\"\"\n    # Get current user's email\n    user_data = get_current_user()\n    user_email = user_data.get('email', '')\n    \n    # Get only current user's stories\n    all_stories = get_user_stories(user_email)\n    \n    if not all_stories:\n        st.markdown(\"\"\"\n        <div class=\"story-card\">\n            <h3>üìö No Stories Yet</h3>\n            <p>No stories have been shared yet. Be the first to upload a beautiful festival story!</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n        \n        if st.button(\"üìù Upload First Story\", type=\"primary\"):\n            st.switch_page(\"pages/3_Upload.py\")\n        return\n    \n    st.markdown(f\"**üìö Your Collection: {len(all_stories)} festival stories**\")\n    \n    # Enhanced filtering and search for ALL stories\n    col1, col2, col3 = st.columns(3)\n    with col1:\n        search_query = st.text_input(\"üîç Search stories:\", placeholder=\"Search by title, festival, author...\")\n    \n    with col2:\n        festivals = list(set([story.get('festival', 'Unknown') for story in all_stories]))\n        filter_festival = st.selectbox(\"Filter by Festival:\", [\"All Festivals\"] + sorted(festivals))\n    \n    with col3:\n        languages = list(set([story.get('language', 'Unknown') for story in all_stories]))\n        filter_language = st.selectbox(\"Filter by Language:\", [\"All Languages\"] + sorted(languages))\n    \n    # Additional filters\n    col4, col5 = st.columns(2)\n    with col4:\n        states = list(set([story.get('user_state', 'Unknown') for story in all_stories if story.get('user_state', 'Unknown') != 'Unknown']))\n        filter_state = st.selectbox(\"Filter by State:\", [\"All States\"] + sorted(states))\n    \n    with col5:\n        authors = list(set([story.get('user_name', 'Anonymous') for story in all_stories if story.get('user_name', 'Anonymous') != 'Anonymous']))\n        filter_author = st.selectbox(\"Filter by Author:\", [\"All Authors\"] + sorted(authors))\n    \n    # Filter stories based on all criteria\n    filtered_stories = all_stories\n    \n    if search_query:\n        filtered_stories = [\n            story for story in filtered_stories\n            if search_query.lower() in story.get('title', '').lower() or\n               search_query.lower() in story.get('festival', '').lower() or\n               search_query.lower() in story.get('description', '').lower() or\n               search_query.lower() in story.get('user_name', '').lower()\n        ]\n    \n    if filter_festival != \"All Festivals\":\n        filtered_stories = [story for story in filtered_stories if story.get('festival') == filter_festival]\n    \n    if filter_language != \"All Languages\":\n        filtered_stories = [story for story in filtered_stories if story.get('language') == filter_language]\n    \n    if filter_state != \"All States\":\n        filtered_stories = [story for story in filtered_stories if story.get('user_state') == filter_state]\n    \n    if filter_author != \"All Authors\":\n        filtered_stories = [story for story in filtered_stories if story.get('user_name') == filter_author]\n    \n    # Display filtered results\n    if not filtered_stories:\n        st.warning(\"No stories found matching your search criteria.\")\n    else:\n        st.markdown(f\"**üìñ Showing {len(filtered_stories)} stories**\")\n        for story in filtered_stories:\n            display_story_card(story)\n\ndef display_story_card(story):\n    \"\"\"Display a story card in the library with author information\"\"\"\n    col1, col2 = st.columns([3, 1])\n    \n    # Enhanced story card with author info\n    author_info = f\"by {story.get('user_name', 'Anonymous')}\"\n    if story.get('user_state', 'Unknown') != 'Unknown':\n        author_info += f\" from {story.get('user_state')}\"\n    \n    created_date = story.get('created_at', '').split('T')[0] if story.get('created_at') else 'Unknown'\n    \n    with col1:\n        st.markdown(f\"\"\"\n        <div class=\"story-card\">\n            <h3>üìñ {story.get('title', 'Untitled Story')}</h3>\n            <p><em>{author_info}</em></p>\n            <p><strong>üéä Festival:</strong> {story.get('festival', 'Unknown')}</p>\n            <p><strong>üó£Ô∏è Language:</strong> {story.get('language', 'Unknown')}</p>\n            <p><strong>üìö Type:</strong> {story.get('story_type', 'Unknown')}</p>\n            <p><strong>üìÑ Sections:</strong> {len(story.get('sections', []))}</p>\n            <p><strong>üìÖ Created:</strong> {created_date}</p>\n            <p><small>{story.get('description', 'No description available')[:150]}{'...' if len(story.get('description', '')) > 150 else ''}</small></p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col2:\n        if st.button(f\"üìñ Read Story\", key=f\"read_{story.get('story_id')}\", type=\"primary\"):\n            st.session_state.selected_story_id = story.get('story_id')\n            st.rerun()\n        \n        if st.button(f\"‚ÑπÔ∏è Details\", key=f\"details_{story.get('story_id')}\"):\n            show_story_details(story)\n\ndef show_story_details(story):\n    \"\"\"Show detailed story information\"\"\"\n    with st.expander(f\"üìã Story Details: {story.get('title', 'Untitled')}\", expanded=True):\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            st.write(f\"**Story ID:** {story.get('story_id', 'N/A')}\")\n            st.write(f\"**Title:** {story.get('title', 'N/A')}\")\n            st.write(f\"**Festival:** {story.get('festival', 'N/A')}\")\n            st.write(f\"**Language:** {story.get('language', 'N/A')}\")\n            st.write(f\"**Type:** {story.get('story_type', 'N/A')}\")\n        \n        with col2:\n            st.write(f\"**Input Method:** {story.get('input_method', 'N/A')}\")\n            st.write(f\"**Sections:** {len(story.get('sections', []))}\")\n            st.write(f\"**Images:** {len(story.get('images', {}))}\")\n            st.write(f\"**Created:** {story.get('created_at', 'N/A')}\")\n            st.write(f\"**Updated:** {story.get('updated_at', 'N/A')}\")\n        \n        st.write(f\"**Description:** {story.get('description', 'No description available')}\")\n        \n        # AI Enhancement details\n        if story.get('ai_enhancements'):\n            with st.expander(\"ü§ñ AI Enhancement Details\"):\n                enhancements = story.get('ai_enhancements', {})\n                if 'improvements_made' in enhancements:\n                    st.write(\"**Improvements Made:**\")\n                    for improvement in enhancements['improvements_made']:\n                        st.write(f\"‚Ä¢ {improvement}\")\n                \n                if 'confidence_score' in enhancements:\n                    st.metric(\"AI Confidence Score\", f\"{enhancements['confidence_score'] * 100:.1f}%\")\n\ndef show_story_reader():\n    \"\"\"Display story as virtual book\"\"\"\n    story_id = st.session_state.selected_story_id\n    story = load_story(story_id)\n    \n    if not story:\n        st.error(\"‚ùå Story not found\")\n        if st.button(\"üîô Back to Library\"):\n            del st.session_state.selected_story_id\n            st.rerun()\n        return\n    \n    # Initialize page number\n    if 'current_page' not in st.session_state:\n        st.session_state.current_page = 0  # 0 for cover page\n    \n    # Book navigation\n    sections = story.get('sections', [])\n    total_pages = len(sections) + 1  # +1 for cover page\n    current_page = st.session_state.current_page\n    \n    # Display current page\n    if current_page == 0:\n        show_book_cover(story)\n    else:\n        show_book_page(story, sections[current_page - 1], current_page)\n    \n    # Navigation controls\n    show_book_navigation(total_pages)\n\ndef show_book_cover(story):\n    \"\"\"Display book cover page\"\"\"\n    st.markdown(f\"\"\"\n    <div class=\"book-cover\">\n        <div class=\"cover-title\">üìñ {story.get('title', 'Untitled Story')}</div>\n        <div class=\"cover-subtitle\">üéä {story.get('festival', 'Festival')} Story</div>\n        <div class=\"cover-details\">\n            <p>By: {story.get('user_name', 'Anonymous')}</p>\n            <p>Language: {story.get('language', 'Unknown')}</p>\n            <p>Story Type: {story.get('story_type', 'Unknown')}</p>\n            <p>Created: {story.get('created_at', 'Unknown')[:10] if story.get('created_at') else 'Unknown'}</p>\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Story description with consistent sizing and animation\n    import html\n    animation_class = \"page-turning\" if st.session_state.get('page_turning') else \"\"\n    \n    st.markdown(f\"\"\"\n    <div class=\"book-page page-shadow {animation_class}\">\n        <div class=\"page-header\" style=\"grid-column: 1 / -1; text-align: center; margin-bottom: 1rem; font-size: 1.5rem; color: #8B4513; font-weight: bold;\">üìñ About This Story</div>\n        <div class=\"page-content-center\">\n            {html.escape(story.get('description', 'No description available')).replace(chr(10), '<br>')}\n        </div>\n        <div class=\"page-number\" style=\"grid-column: -1; text-align: right; margin-top: 1rem;\">Cover Page</div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\ndef show_book_page(story, section, page_number):\n    \"\"\"Display a book page with improved layout\"\"\"\n    \n    # Voice controls for voice-input stories\n    if story.get('input_method') == 'voice':\n        show_voice_controls(section, page_number)\n    \n    # Create the main page layout\n    images = story.get('images', {})\n    image1_key = f\"section_{page_number}_image_1\"\n    image2_key = f\"section_{page_number}_image_2\"\n    \n    # Prepare images\n    image1_data = None\n    image2_data = None\n    \n    if image1_key in images:\n        try:\n            image1_data = base64.b64decode(images[image1_key])\n        except Exception:\n            pass\n    \n    if image2_key in images:\n        try:\n            image2_data = base64.b64decode(images[image2_key])\n        except Exception:\n            pass\n    \n    # Add page turning animation class if triggered\n    animation_class = \"page-turning\" if st.session_state.get('page_turning') else \"\"\n    \n    # Create page HTML with images positioned correctly\n    page_html = f\"\"\"\n    <div class=\"book-page page-shadow {animation_class}\">\n        <div class=\"page-header\" style=\"grid-column: 1 / -1; text-align: center; margin-bottom: 1rem; font-size: 1.5rem; color: #8B4513; font-weight: bold;\">\n            {section.get('title', f'Chapter {page_number}')}\n        </div>\n    \"\"\"\n    \n    # Add top-left image if available\n    if image1_data:\n        image1_b64 = base64.b64encode(image1_data).decode()\n        page_html += f\"\"\"\n        <img src=\"data:image/jpeg;base64,{image1_b64}\" class=\"page-image-top\" alt=\"Section illustration 1\">\n        \"\"\"\n    \n    # Add content in the center with proper HTML escaping\n    import html\n    content = section.get('content', 'No content available')\n    # Clean content and convert newlines to breaks\n    clean_content = html.escape(content).replace('\\n', '<br>')\n    \n    page_html += f\"\"\"\n        <div class=\"page-content-center\">\n            {clean_content}\n        </div>\n    \"\"\"\n    \n    # Add bottom-right image if available\n    if image2_data:\n        image2_b64 = base64.b64encode(image2_data).decode()\n        page_html += f\"\"\"\n        <img src=\"data:image/jpeg;base64,{image2_b64}\" class=\"page-image-bottom\" alt=\"Section illustration 2\">\n        \"\"\"\n    \n    page_html += f\"\"\"\n        <div class=\"page-number\" style=\"grid-column: -1; text-align: right; margin-top: 1rem;\">\n            Page {page_number}\n        </div>\n    </div>\n    \"\"\"\n    \n    st.markdown(page_html, unsafe_allow_html=True)\n\ndef show_voice_controls(section, page_number):\n    \"\"\"Show voice playback controls for voice-input stories\"\"\"\n    st.markdown(\"\"\"\n    <div class=\"voice-controls\">\n        <h4>üé§ Voice Playback</h4>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Voice playback button\n    if st.button(f\"üîä Play Section {page_number}\", key=f\"play_voice_{page_number}\"):\n        if section.get('audio_data'):\n            try:\n                audio_bytes = base64.b64decode(section['audio_data'])\n                st.audio(audio_bytes, format='audio/wav')\n            except Exception as e:\n                st.error(f\"Error playing audio: {str(e)}\")\n        else:\n            st.info(\"No audio data available for this section\")\n\ndef show_book_navigation(total_pages):\n    \"\"\"Display book navigation controls with animations\"\"\"\n    st.markdown(\"---\")\n    \n    # Add page turn sound effect (CSS animation)\n    st.markdown(\"\"\"\n    <style>\n    .nav-button {\n        transition: all 0.3s ease;\n        transform-origin: center;\n    }\n    .nav-button:hover {\n        transform: scale(1.05);\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    }\n    .page-indicator {\n        text-align: center; \n        font-size: 1.1rem; \n        color: #8B4513; \n        font-weight: bold;\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 0.5rem;\n        border-radius: 10px;\n        border: 2px solid #D4AF37;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    col1, col2, col3, col4, col5 = st.columns([1, 1, 2, 1, 1])\n    \n    with col1:\n        if st.button(\"üîô Back to Library\", key=\"back_to_library\"):\n            del st.session_state.selected_story_id\n            if 'current_page' in st.session_state:\n                del st.session_state.current_page\n            st.rerun()\n    \n    with col2:\n        if st.session_state.current_page > 0:\n            if st.button(\"‚¨ÖÔ∏è Previous\", key=\"prev_page\"):\n                st.session_state.current_page -= 1\n                # Add page turn animation trigger\n                st.session_state.page_turning = True\n                st.rerun()\n    \n    with col3:\n        # Page indicator with better styling\n        current = st.session_state.current_page\n        if current == 0:\n            page_info = \"üìñ Cover Page\"\n        else:\n            page_info = f\"üìÑ Page {current} of {total_pages - 1}\"\n        \n        st.markdown(f'<div class=\"page-indicator\">{page_info}</div>', unsafe_allow_html=True)\n    \n    with col4:\n        if st.session_state.current_page < total_pages - 1:\n            if st.button(\"Next ‚û°Ô∏è\", key=\"next_page\"):\n                st.session_state.current_page += 1\n                # Add page turn animation trigger\n                st.session_state.page_turning = True\n                st.rerun()\n    \n    with col5:\n        # Quick jump to pages\n        page_options = [\"Cover\"] + [f\"Page {i}\" for i in range(1, total_pages)]\n        selected_page = st.selectbox(\n            \"Jump to:\",\n            page_options,\n            index=st.session_state.current_page,\n            key=\"page_selector\"\n        )\n        \n        if selected_page == \"Cover\":\n            target_page = 0\n        else:\n            target_page = int(selected_page.split()[1])\n        \n        if target_page != st.session_state.current_page:\n            st.session_state.current_page = target_page\n            st.session_state.page_turning = True\n            st.rerun()\n    \n    # Enhanced progress bar\n    progress = (st.session_state.current_page + 1) / total_pages\n    st.progress(progress, text=f\"Reading Progress: {int(progress * 100)}%\")\n    \n    # Clear page turning animation flag after a delay\n    if st.session_state.get('page_turning'):\n        # Use JavaScript to clear the animation after it completes\n        st.markdown(\"\"\"\n        <script>\n        setTimeout(function() {\n            var elements = document.getElementsByClassName('page-turning');\n            for (var i = 0; i < elements.length; i++) {\n                elements[i].classList.remove('page-turning');\n            }\n        }, 800);\n        </script>\n        \"\"\", unsafe_allow_html=True)\n        st.session_state.page_turning = False\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":22156},"pages/5_Analytics.py":{"content":"import streamlit as st\nfrom utils.auth import check_authentication, get_current_user\nfrom utils.db import get_database_stats, get_all_stories, load_users\nimport json\nfrom datetime import datetime\nimport pandas as pd\n\n# Page configuration\nst.set_page_config(\n    page_title=\"Analytics - Utsav Kathalu AI\",\n    page_icon=\"üìä\",\n    layout=\"wide\"\n)\n\ndef main():\n    # Check authentication\n    if not check_authentication():\n        st.warning(\"üîí Please login to access analytics.\")\n        if st.button(\"üîë Go to Login\"):\n            st.switch_page(\"pages/2_Auth.py\")\n        return\n    \n    # Custom CSS\n    st.markdown(\"\"\"\n    <style>\n    .analytics-header {\n        text-align: center;\n        color: #D4AF37;\n        font-size: 2.5rem;\n        margin-bottom: 1rem;\n    }\n    .stat-card {\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        margin: 1rem 0;\n        border-left: 5px solid #FF6B35;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        text-align: center;\n    }\n    .user-card {\n        background: linear-gradient(135deg, #E6F3FF 0%, #CCE7FF 100%);\n        padding: 1.5rem;\n        border-radius: 10px;\n        margin: 0.5rem 0;\n        border-left: 4px solid #4A90E2;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    st.markdown('<h1 class=\"analytics-header\">üìä Platform Analytics</h1>', unsafe_allow_html=True)\n    \n    # Get database statistics\n    stats = get_database_stats()\n    users_data = load_users()\n    all_stories = get_all_stories()\n    \n    # Overview metrics\n    st.markdown(\"## üìà Platform Overview\")\n    \n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        st.markdown(f\"\"\"\n        <div class=\"stat-card\">\n            <h2 style=\"color: #FF6B35; margin: 0;\">{stats['total_users']}</h2>\n            <p style=\"margin: 0; font-size: 1.1rem;\">Total Users</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col2:\n        st.markdown(f\"\"\"\n        <div class=\"stat-card\">\n            <h2 style=\"color: #FF6B35; margin: 0;\">{stats['total_stories']}</h2>\n            <p style=\"margin: 0; font-size: 1.1rem;\">Total Stories</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col3:\n        st.markdown(f\"\"\"\n        <div class=\"stat-card\">\n            <h2 style=\"color: #FF6B35; margin: 0;\">{len(stats['languages'])}</h2>\n            <p style=\"margin: 0; font-size: 1.1rem;\">Languages</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    with col4:\n        st.markdown(f\"\"\"\n        <div class=\"stat-card\">\n            <h2 style=\"color: #FF6B35; margin: 0;\">{len(stats['festivals'])}</h2>\n            <p style=\"margin: 0; font-size: 1.1rem;\">Festivals</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n    \n    st.markdown(\"---\")\n    \n    # Detailed analytics\n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.markdown(\"### üó£Ô∏è Language Distribution\")\n        if stats['languages']:\n            lang_data = pd.DataFrame(list(stats['languages'].items()))\n            lang_data.columns = ['Language', 'Stories']\n            st.bar_chart(lang_data.set_index('Language'))\n        else:\n            st.info(\"No language data available yet.\")\n    \n    with col2:\n        st.markdown(\"### üéä Festival Distribution\")\n        if stats['festivals']:\n            fest_data = pd.DataFrame(list(stats['festivals'].items()))\n            fest_data.columns = ['Festival', 'Stories']\n            st.bar_chart(fest_data.set_index('Festival'))\n        else:\n            st.info(\"No festival data available yet.\")\n    \n    st.markdown(\"---\")\n    \n    # User details\n    st.markdown(\"## üë• User Details\")\n    \n    if users_data:\n        for email, user_info in users_data.items():\n            user_stories = [story for story in all_stories if story.get('user_email') == email]\n            \n            st.markdown(f\"\"\"\n            <div class=\"user-card\">\n                <h4>üë§ {user_info.get('name', 'Unknown')}</h4>\n                <p><strong>Email:</strong> {email}</p>\n                <p><strong>Language:</strong> {user_info.get('preferred_language', 'Unknown')}</p>\n                <p><strong>State:</strong> {user_info.get('state', 'Unknown')}</p>\n                <p><strong>Stories:</strong> {len(user_stories)}</p>\n                <p><strong>Joined:</strong> {user_info.get('created_at', 'Unknown')[:10] if user_info.get('created_at') else 'Unknown'}</p>\n            </div>\n            \"\"\", unsafe_allow_html=True)\n            \n            if user_stories:\n                with st.expander(f\"üìö Stories by {user_info.get('name', 'Unknown')} ({len(user_stories)})\"):\n                    for story in user_stories:\n                        st.write(f\"**{story.get('title', 'Untitled')}** - {story.get('festival', 'Unknown')} ({story.get('language', 'Unknown')})\")\n                        st.write(f\"   Created: {story.get('created_at', 'Unknown')[:10] if story.get('created_at') else 'Unknown'}\")\n                        st.write(f\"   Sections: {len(story.get('sections', []))}\")\n                        st.write(\"---\")\n    else:\n        st.info(\"No users have registered yet.\")\n    \n    st.markdown(\"---\")\n    \n    # Recent activity\n    st.markdown(\"## üïí Recent Activity\")\n    \n    if all_stories:\n        # Sort stories by creation date\n        sorted_stories = sorted(all_stories, key=lambda x: x.get('created_at', ''), reverse=True)\n        recent_stories = sorted_stories[:10]  # Show last 10 stories\n        \n        for story in recent_stories:\n            col1, col2, col3 = st.columns([2, 1, 1])\n            \n            with col1:\n                st.write(f\"**{story.get('title', 'Untitled')}** by {story.get('user_name', 'Unknown')}\")\n            \n            with col2:\n                st.write(f\"{story.get('festival', 'Unknown')} ({story.get('language', 'Unknown')})\")\n            \n            with col3:\n                st.write(f\"{story.get('created_at', 'Unknown')[:10] if story.get('created_at') else 'Unknown'}\")\n    else:\n        st.info(\"No stories have been uploaded yet.\")\n\nif __name__ == \"__main__\":\n    main()","size_bytes":6142},"pages/6_PublicBooks.py":{"content":"import streamlit as st\nfrom utils.db import get_all_stories, load_story\nimport base64\nimport html\n\ndef main():\n    \"\"\"Public Virtual Book Library - Login required\"\"\"\n    from utils.auth import check_authentication\n    \n    # Check authentication - login required for public books too\n    if not check_authentication():\n        st.error(\"üîí Please login to explore festival stories\")\n        if st.button(\"üîë Go to Login\"):\n            st.switch_page(\"pages/2_Auth.py\")\n        return\n    \n    # Custom CSS for the public book library\n    st.markdown(\"\"\"\n    <style>\n    .public-header {\n        background: linear-gradient(135deg, #FF6B35 0%, #F39C12 50%, #D4AF37 100%);\n        color: white;\n        text-align: center;\n        padding: 3rem 1rem;\n        border-radius: 15px;\n        margin-bottom: 2rem;\n        box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n    }\n    .public-title {\n        font-size: 3rem;\n        font-weight: bold;\n        margin-bottom: 1rem;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n    }\n    .public-subtitle {\n        font-size: 1.3rem;\n        opacity: 0.9;\n        margin-bottom: 1rem;\n    }\n    .story-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n        gap: 2rem;\n        margin: 2rem 0;\n    }\n    .public-story-card {\n        background: linear-gradient(135deg, #FFF8DC 0%, #F0E68C 100%);\n        padding: 2rem;\n        border-radius: 15px;\n        border-left: 5px solid #FF6B35;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        cursor: pointer;\n        transition: all 0.3s ease;\n        position: relative;\n    }\n    .public-story-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 8px 15px rgba(0,0,0,0.2);\n    }\n    .filter-section {\n        background: rgba(255,255,255,0.1);\n        padding: 1.5rem;\n        border-radius: 10px;\n        margin: 2rem 0;\n    }\n    .book-page {\n        background: linear-gradient(135deg, #FFFEF7 0%, #FFF8DC 100%);\n        padding: 3rem;\n        border-radius: 15px;\n        min-height: 800px;\n        position: relative;\n        border: 1px solid #DEB887;\n        margin: 1rem 0;\n        display: grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-rows: auto 1fr auto;\n        gap: 1rem;\n        transform-style: preserve-3d;\n        backface-visibility: hidden;\n        box-shadow: \n            inset 0 0 50px rgba(139,69,19,0.1),\n            0 20px 40px rgba(0,0,0,0.15),\n            inset -10px 0 20px rgba(0,0,0,0.05);\n    }\n    .page-content-center {\n        grid-column: 1 / -1;\n        font-size: 1.2rem;\n        line-height: 1.8;\n        color: #2F4F4F;\n        text-align: justify;\n        padding: 1rem;\n    }\n    .page-image-top {\n        grid-column: 1;\n        grid-row: 2;\n        width: 100%;\n        max-height: 300px;\n        object-fit: cover;\n        border-radius: 10px;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    }\n    .page-image-bottom {\n        grid-column: 3;\n        grid-row: 2;\n        width: 100%;\n        max-height: 300px;\n        object-fit: cover;\n        border-radius: 10px;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n        align-self: end;\n    }\n    .navigation-controls {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin: 2rem 0;\n        padding: 1rem;\n        background: rgba(255,255,255,0.1);\n        border-radius: 10px;\n    }\n    </style>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Public header\n    st.markdown(\"\"\"\n    <div class=\"public-header\">\n        <div class=\"public-title\">üìö Utsav Kathalu AI</div>\n        <div class=\"public-subtitle\">Explore Festival Stories from Across India</div>\n        <p>Discover authentic cultural stories and traditions shared by storytellers nationwide</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Check if viewing a specific story\n    if 'public_selected_story' in st.session_state:\n        show_public_story_viewer()\n    else:\n        show_public_story_library()\n\ndef show_public_story_library():\n    \"\"\"Display all stories for authenticated users\"\"\"\n    from utils.db import get_all_stories\n    \n    # Get all stories\n    all_stories = get_all_stories()\n    \n    if not all_stories:\n        st.markdown(\"\"\"\n        <div class=\"public-story-card\">\n            <h3>üåü Welcome to Utsav Kathalu AI!</h3>\n            <p>This is a community platform for sharing and discovering authentic festival stories from across India.</p>\n            <p>No stories have been shared yet. Be the first to contribute by uploading your festival story!</p>\n        </div>\n        \"\"\", unsafe_allow_html=True)\n        \n        if st.button(\"üé≠ Share Your Festival Story\", type=\"primary\", use_container_width=True):\n            st.switch_page(\"pages/3_Upload.py\")\n        return\n    \n    # Filtering section\n    st.markdown('<div class=\"filter-section\">', unsafe_allow_html=True)\n    st.markdown(\"### üîç Explore Stories\")\n    \n    col1, col2, col3 = st.columns(3)\n    with col1:\n        search_query = st.text_input(\"Search stories:\", placeholder=\"Title, festival, author...\")\n    \n    with col2:\n        festivals = sorted(set([story.get('festival', 'Unknown') for story in all_stories]))\n        selected_festival = st.selectbox(\"Festival:\", [\"All Festivals\"] + festivals)\n    \n    with col3:\n        languages = sorted(set([story.get('language', 'Unknown') for story in all_stories]))\n        selected_language = st.selectbox(\"Language:\", [\"All Languages\"] + languages)\n    \n    col4, col5 = st.columns(2)\n    with col4:\n        states = sorted(set([story.get('user_state', 'Unknown') for story in all_stories if story.get('user_state', 'Unknown') != 'Unknown']))\n        selected_state = st.selectbox(\"State:\", [\"All States\"] + states)\n    \n    with col5:\n        authors = sorted(set([story.get('user_name', 'Anonymous') for story in all_stories if story.get('user_name', 'Anonymous') != 'Anonymous']))\n        selected_author = st.selectbox(\"Author:\", [\"All Authors\"] + authors)\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n    \n    # Filter stories\n    filtered_stories = all_stories\n    \n    if search_query:\n        filtered_stories = [\n            story for story in filtered_stories\n            if search_query.lower() in story.get('title', '').lower() or\n               search_query.lower() in story.get('festival', '').lower() or\n               search_query.lower() in story.get('user_name', '').lower()\n        ]\n    \n    if selected_festival != \"All Festivals\":\n        filtered_stories = [s for s in filtered_stories if s.get('festival') == selected_festival]\n    \n    if selected_language != \"All Languages\":\n        filtered_stories = [s for s in filtered_stories if s.get('language') == selected_language]\n    \n    if selected_state != \"All States\":\n        filtered_stories = [s for s in filtered_stories if s.get('user_state') == selected_state]\n    \n    if selected_author != \"All Authors\":\n        filtered_stories = [s for s in filtered_stories if s.get('user_name') == selected_author]\n    \n    # Display results\n    st.markdown(f\"### üìñ {len(filtered_stories)} Stories Found\")\n    \n    if filtered_stories:\n        # Display stories in grid\n        cols = st.columns(2)\n        for i, story in enumerate(filtered_stories):\n            col = cols[i % 2]\n            with col:\n                display_public_story_card(story)\n    else:\n        st.warning(\"No stories match your search criteria.\")\n\ndef display_public_story_card(story):\n    \"\"\"Display a story card for public viewing\"\"\"\n    author_info = f\"by {story.get('user_name', 'Anonymous')}\"\n    if story.get('user_state', 'Unknown') != 'Unknown':\n        author_info += f\" from {story.get('user_state')}\"\n    \n    created_date = story.get('created_at', '').split('T')[0] if story.get('created_at') else 'Unknown'\n    description = story.get('description', 'No description available')\n    preview_text = description[:120] + '...' if len(description) > 120 else description\n    \n    st.markdown(f\"\"\"\n    <div class=\"public-story-card\">\n        <h3>üìñ {story.get('title', 'Untitled Story')}</h3>\n        <p><em>{author_info}</em></p>\n        <p><strong>üéä Festival:</strong> {story.get('festival', 'Unknown')}</p>\n        <p><strong>üó£Ô∏è Language:</strong> {story.get('language', 'Unknown')}</p>\n        <p><strong>üìö Sections:</strong> {len(story.get('sections', []))}</p>\n        <p><strong>üìÖ Created:</strong> {created_date}</p>\n        <p style=\"margin-top: 1rem; font-style: italic;\">{preview_text}</p>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    if st.button(f\"üìñ Read Story\", key=f\"public_read_{story.get('story_id')}\", use_container_width=True):\n        st.session_state.public_selected_story = story.get('story_id')\n        st.session_state.public_current_page = 0\n        st.rerun()\n\ndef show_public_story_viewer():\n    \"\"\"Display story reader for public viewing\"\"\"\n    story_id = st.session_state.public_selected_story\n    story = load_story(story_id)\n    \n    if not story:\n        st.error(\"Story not found\")\n        if st.button(\"üîô Back to Library\"):\n            del st.session_state.public_selected_story\n            st.rerun()\n        return\n    \n    # Initialize page\n    if 'public_current_page' not in st.session_state:\n        st.session_state.public_current_page = 0\n    \n    sections = story.get('sections', [])\n    total_pages = len(sections) + 1  # +1 for cover\n    current_page = st.session_state.public_current_page\n    \n    # Display current page\n    if current_page == 0:\n        show_public_book_cover(story)\n    else:\n        show_public_book_page(story, sections[current_page - 1], current_page)\n    \n    # Navigation\n    show_public_navigation(total_pages)\n\ndef show_public_book_cover(story):\n    \"\"\"Display book cover for public viewing\"\"\"\n    author_info = f\"by {story.get('user_name', 'Anonymous')}\"\n    if story.get('user_state', 'Unknown') != 'Unknown':\n        author_info += f\" from {story.get('user_state')}\"\n    \n    st.markdown(f\"\"\"\n    <div style=\"background: linear-gradient(135deg, #4A90E2 0%, #7B68EE 50%, #FF6B6B 100%); \n                color: white; padding: 4rem 2rem; border-radius: 15px; text-align: center; \n                box-shadow: 0 10px 30px rgba(0,0,0,0.3); margin: 2rem 0;\">\n        <div style=\"font-size: 2.5rem; font-weight: bold; margin-bottom: 1rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\">\n            üìñ {story.get('title', 'Untitled Story')}\n        </div>\n        <div style=\"font-size: 1.2rem; opacity: 0.9; margin-bottom: 2rem;\">\n            üéä {story.get('festival', 'Festival')} Story\n        </div>\n        <div style=\"font-size: 1rem; opacity: 0.8;\">\n            {author_info}<br>\n            Language: {story.get('language', 'Unknown')} | \n            {len(story.get('sections', []))} Sections\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n    \n    # Story description\n    description = story.get('description', 'No description available')\n    clean_description = html.escape(description).replace('\\n', '<br>')\n    \n    st.markdown(f\"\"\"\n    <div class=\"book-page\">\n        <div style=\"grid-column: 1 / -1; text-align: center; margin-bottom: 1rem; \n                   font-size: 1.5rem; color: #8B4513; font-weight: bold;\">\n            üìñ About This Story\n        </div>\n        <div class=\"page-content-center\">\n            {clean_description}\n        </div>\n        <div style=\"grid-column: -1; text-align: right; margin-top: 1rem; color: #8B4513; font-style: italic;\">\n            Cover Page\n        </div>\n    </div>\n    \"\"\", unsafe_allow_html=True)\n\ndef show_public_book_page(story, section, page_number):\n    \"\"\"Display a book page for public viewing\"\"\"\n    images = story.get('images', {})\n    image1_key = f\"section_{page_number}_image_1\"\n    image2_key = f\"section_{page_number}_image_2\"\n    \n    # Prepare images\n    image1_data = None\n    image2_data = None\n    \n    if image1_key in images:\n        try:\n            image1_data = base64.b64decode(images[image1_key])\n        except Exception:\n            pass\n    \n    if image2_key in images:\n        try:\n            image2_data = base64.b64decode(images[image2_key])\n        except Exception:\n            pass\n    \n    # Clean content\n    content = section.get('content', 'No content available')\n    clean_content = html.escape(content).replace('\\n', '<br>')\n    \n    # Create page HTML\n    page_html = f\"\"\"\n    <div class=\"book-page\">\n        <div style=\"grid-column: 1 / -1; text-align: center; margin-bottom: 1rem; \n                   font-size: 1.5rem; color: #8B4513; font-weight: bold;\">\n            {html.escape(section.get('title', f'Chapter {page_number}'))}\n        </div>\n    \"\"\"\n    \n    # Add top-left image\n    if image1_data:\n        image1_b64 = base64.b64encode(image1_data).decode()\n        page_html += f'<img src=\"data:image/jpeg;base64,{image1_b64}\" class=\"page-image-top\" alt=\"Illustration 1\">'\n    \n    # Add content\n    page_html += f'<div class=\"page-content-center\">{clean_content}</div>'\n    \n    # Add bottom-right image\n    if image2_data:\n        image2_b64 = base64.b64encode(image2_data).decode()\n        page_html += f'<img src=\"data:image/jpeg;base64,{image2_b64}\" class=\"page-image-bottom\" alt=\"Illustration 2\">'\n    \n    page_html += f\"\"\"\n        <div style=\"grid-column: -1; text-align: right; margin-top: 1rem; color: #8B4513; font-style: italic;\">\n            Page {page_number}\n        </div>\n    </div>\n    \"\"\"\n    \n    st.markdown(page_html, unsafe_allow_html=True)\n\ndef show_public_navigation(total_pages):\n    \"\"\"Show navigation controls for public viewing\"\"\"\n    current_page = st.session_state.public_current_page\n    \n    st.markdown('<div class=\"navigation-controls\">', unsafe_allow_html=True)\n    \n    col1, col2, col3, col4, col5 = st.columns([1, 1, 2, 1, 1])\n    \n    with col1:\n        if st.button(\"üîô Library\", use_container_width=True):\n            del st.session_state.public_selected_story\n            if 'public_current_page' in st.session_state:\n                del st.session_state.public_current_page\n            st.rerun()\n    \n    with col2:\n        if current_page > 0:\n            if st.button(\"‚óÄ Previous\", use_container_width=True):\n                st.session_state.public_current_page = current_page - 1\n                st.rerun()\n    \n    with col3:\n        st.markdown(f\"<p style='text-align: center; margin: 0; padding: 0.5rem;'>Page {current_page + 1} of {total_pages}</p>\", unsafe_allow_html=True)\n        progress = (current_page + 1) / total_pages\n        st.progress(progress)\n    \n    with col4:\n        if current_page < total_pages - 1:\n            if st.button(\"Next ‚ñ∂\", use_container_width=True):\n                st.session_state.public_current_page = current_page + 1\n                st.rerun()\n    \n    with col5:\n        if st.button(\"üé≠ Share Story\", use_container_width=True):\n            st.switch_page(\"pages/3_Upload.py\")\n    \n    st.markdown('</div>', unsafe_allow_html=True)\n\nif __name__ == \"__main__\":\n    main()","size_bytes":15026},"utils/api_manager.py":{"content":"import os\nimport streamlit as st\nfrom datetime import datetime, timedelta\nimport json\n\nclass APIKeyManager:\n    def __init__(self):\n        self.api_keys = self._load_api_keys()\n        self.current_key_index = 0\n        self.usage_counts = self._load_usage_counts()\n        self.rate_limit_warning_threshold = 45  # Warn when approaching 50 requests\n        \n    def _load_api_keys(self):\n        \"\"\"Load API keys from environment variables\"\"\"\n        keys = []\n        \n        # Primary key\n        primary_key = os.environ.get(\"OPENAI_API_KEY\")\n        if primary_key:\n            keys.append({\"key\": primary_key, \"name\": \"Primary\"})\n        \n        # Secondary key (OPENAI_API_KEY2)\n        secondary_key = os.environ.get(\"OPENAI_API_KEY2\")\n        if secondary_key:\n            keys.append({\"key\": secondary_key, \"name\": \"Secondary\"})\n        \n        # Additional backup keys (if available)\n        backup_key_1 = os.environ.get(\"OPENAI_API_KEY_BACKUP1\")\n        if backup_key_1:\n            keys.append({\"key\": backup_key_1, \"name\": \"Backup 1\"})\n            \n        backup_key_2 = os.environ.get(\"OPENAI_API_KEY_BACKUP2\")\n        if backup_key_2:\n            keys.append({\"key\": backup_key_2, \"name\": \"Backup 2\"})\n        \n        return keys\n    \n    def _load_usage_counts(self):\n        \"\"\"Load usage counts from session state\"\"\"\n        if 'api_usage_counts' not in st.session_state:\n            st.session_state.api_usage_counts = {}\n        return st.session_state.api_usage_counts\n    \n    def _save_usage_counts(self):\n        \"\"\"Save usage counts to session state\"\"\"\n        st.session_state.api_usage_counts = self.usage_counts\n    \n    def get_current_key(self):\n        \"\"\"Get the current active API key\"\"\"\n        if not self.api_keys:\n            return None\n        \n        if self.current_key_index >= len(self.api_keys):\n            self.current_key_index = 0\n        \n        return self.api_keys[self.current_key_index]\n    \n    def record_usage(self, success=True):\n        \"\"\"Record API usage for the current key\"\"\"\n        current_key = self.get_current_key()\n        if not current_key:\n            return\n        \n        key_name = current_key[\"name\"]\n        today = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        if key_name not in self.usage_counts:\n            self.usage_counts[key_name] = {}\n        \n        if today not in self.usage_counts[key_name]:\n            self.usage_counts[key_name][today] = {\"requests\": 0, \"errors\": 0}\n        \n        self.usage_counts[key_name][today][\"requests\"] += 1\n        \n        if not success:\n            self.usage_counts[key_name][today][\"errors\"] += 1\n        \n        self._save_usage_counts()\n        \n        # Check if we should proactively switch keys\n        if success and self.should_warn_about_limit():\n            self._proactive_key_switch()\n    \n    def get_daily_usage(self, key_name=None):\n        \"\"\"Get daily usage for a specific key or current key\"\"\"\n        if key_name is None:\n            current_key = self.get_current_key()\n            if not current_key:\n                return 0, 0\n            key_name = current_key[\"name\"]\n        \n        today = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        if key_name in self.usage_counts and today in self.usage_counts[key_name]:\n            return (\n                self.usage_counts[key_name][today][\"requests\"],\n                self.usage_counts[key_name][today][\"errors\"]\n            )\n        \n        return 0, 0\n    \n    def should_warn_about_limit(self):\n        \"\"\"Check if we should warn about approaching rate limit\"\"\"\n        requests, _ = self.get_daily_usage()\n        return requests >= self.rate_limit_warning_threshold\n    \n    def _proactive_key_switch(self):\n        \"\"\"Proactively switch keys when approaching limit\"\"\"\n        if len(self.api_keys) <= 1:\n            return False\n        \n        # Check if next key has lower usage\n        next_index = (self.current_key_index + 1) % len(self.api_keys)\n        next_key = self.api_keys[next_index]\n        next_requests, _ = self.get_daily_usage(next_key['name'])\n        \n        current_requests, _ = self.get_daily_usage()\n        \n        # Switch if next key has significantly lower usage\n        if next_requests < current_requests - 10:\n            old_key = self.get_current_key()\n            self.current_key_index = next_index\n            new_key = self.get_current_key()\n            st.info(f\"üîÑ Proactively switched from {old_key['name']} ({current_requests} requests) to {new_key['name']} ({next_requests} requests) to avoid rate limits.\")\n            return True\n        \n        return False\n    \n    def switch_to_next_key(self):\n        \"\"\"Switch to the next available API key\"\"\"\n        if len(self.api_keys) <= 1:\n            return False\n        \n        old_key = self.get_current_key()\n        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)\n        new_key = self.get_current_key()\n        \n        if old_key and new_key:\n            st.warning(f\"‚ö†Ô∏è Switched from {old_key['name']} API key to {new_key['name']} API key due to rate limiting.\")\n            return True\n        \n        return False\n    \n    def handle_rate_limit_error(self):\n        \"\"\"Handle rate limit error by switching keys if available\"\"\"\n        current_key = self.get_current_key()\n        if current_key:\n            requests, errors = self.get_daily_usage()\n            st.error(f\"üö´ Rate limit reached for {current_key['name']} API key (Used: {requests} requests today)\")\n        \n        if self.switch_to_next_key():\n            new_key = self.get_current_key()\n            new_requests, _ = self.get_daily_usage(new_key['name'])\n            st.success(f\"‚úÖ Automatically switched to {new_key['name']} API key (Used: {new_requests} requests today)\")\n            return True\n        else:\n            st.error(\"‚ùå All API keys have reached their rate limits. Please wait or add more API keys.\")\n            return False\n    \n    def show_usage_status(self):\n        \"\"\"Display current API usage status\"\"\"\n        if not self.api_keys:\n            st.error(\"‚ùå No API keys configured\")\n            return\n        \n        current_key = self.get_current_key()\n        if not current_key:\n            return\n        \n        requests, errors = self.get_daily_usage()\n        \n        # Show warning if approaching limit\n        if self.should_warn_about_limit():\n            st.warning(f\"‚ö†Ô∏è API Usage Warning: {requests}/50 requests used today with {current_key['name']} key. Will auto-switch if limit reached.\")\n        \n        # Show info about current usage\n        with st.expander(\"üìä API Usage Status\", expanded=False):\n            st.write(f\"**Current Key:** {current_key['name']}\")\n            st.write(f\"**Today's Usage:** {requests} requests, {errors} errors\")\n            st.write(f\"**Available Keys:** {len(self.api_keys)} total\")\n            \n            if len(self.api_keys) > 1:\n                st.write(\"**All Keys Status:**\")\n                for i, key_info in enumerate(self.api_keys):\n                    key_requests, key_errors = self.get_daily_usage(key_info['name'])\n                    status = \"üü¢ Active\" if i == self.current_key_index else \"‚ö™ Standby\"\n                    limit_status = \"‚ö†Ô∏è Near Limit\" if key_requests >= 45 else \"‚úÖ Available\"\n                    st.write(f\"  - {key_info['name']}: {key_requests}/50 requests, {key_errors} errors - {limit_status} {status}\")\n\n# Global API manager instance\napi_manager = APIKeyManager()","size_bytes":7551},"utils/auth.py":{"content":"import streamlit as st\nimport json\nimport hashlib\nimport os\nfrom datetime import datetime\nfrom .db import load_users, save_users\n\ndef initialize_session():\n    \"\"\"Initialize session state variables\"\"\"\n    if 'logged_in' not in st.session_state:\n        st.session_state.logged_in = False\n    if 'user_data' not in st.session_state:\n        st.session_state.user_data = {}\n\ndef hash_password(password):\n    \"\"\"Hash password using SHA-256\"\"\"\n    return hashlib.sha256(password.encode()).hexdigest()\n\ndef validate_email(email):\n    \"\"\"Basic email validation\"\"\"\n    return '@' in email and '.' in email.split('@')[1]\n\ndef validate_password(password):\n    \"\"\"Password validation - minimum 6 characters\"\"\"\n    return len(password) >= 6\n\ndef register_user(name, email, password, preferred_language, state):\n    \"\"\"Register a new user\"\"\"\n    users = load_users()\n    \n    # Check if user already exists\n    if email in users:\n        return False, \"User with this email already exists\"\n    \n    # Validate inputs\n    if not validate_email(email):\n        return False, \"Please enter a valid email address\"\n    \n    if not validate_password(password):\n        return False, \"Password must be at least 6 characters long\"\n    \n    if not name.strip():\n        return False, \"Name cannot be empty\"\n    \n    # Create new user\n    users[email] = {\n        'name': name.strip(),\n        'email': email,\n        'password': hash_password(password),\n        'preferred_language': preferred_language,\n        'state': state,\n        'created_at': datetime.now().isoformat(),\n        'stories': []\n    }\n    \n    # Save users\n    if save_users(users):\n        return True, \"User registered successfully\"\n    else:\n        return False, \"Failed to save user data\"\n\ndef login_user(email, password):\n    \"\"\"Login user with email and password\"\"\"\n    users = load_users()\n    \n    if email not in users:\n        return False, \"User not found\"\n    \n    user = users[email]\n    if user['password'] != hash_password(password):\n        return False, \"Incorrect password\"\n    \n    # Set session state\n    st.session_state.logged_in = True\n    st.session_state.user_data = {\n        'name': user['name'],\n        'email': user['email'],\n        'preferred_language': user['preferred_language'],\n        'state': user['state']\n    }\n    \n    return True, \"Login successful\"\n\ndef logout_user():\n    \"\"\"Logout current user\"\"\"\n    st.session_state.logged_in = False\n    st.session_state.user_data = {}\n\ndef check_authentication():\n    \"\"\"Check if user is authenticated\"\"\"\n    return st.session_state.get('logged_in', False)\n\ndef get_current_user():\n    \"\"\"Get current user data\"\"\"\n    return st.session_state.get('user_data', {})\n\n# Indian states and languages\nINDIAN_STATES = [\n    \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\", \n    \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jharkhand\", \"Karnataka\", \n    \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \n    \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \n    \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\",\n    \"Delhi\", \"Jammu and Kashmir\", \"Ladakh\", \"Puducherry\", \"Chandigarh\",\n    \"Andaman and Nicobar Islands\", \"Dadra and Nagar Haveli and Daman and Diu\",\n    \"Lakshadweep\"\n]\n\nINDIAN_LANGUAGES = [\n    \"Hindi\", \"English\", \"Bengali\", \"Telugu\", \"Marathi\", \"Tamil\", \"Gujarati\", \n    \"Urdu\", \"Kannada\", \"Odia\", \"Malayalam\", \"Punjabi\", \"Assamese\", \"Maithili\", \n    \"Sanskrit\", \"Nepali\", \"Konkani\", \"Sindhi\", \"Dogri\", \"Manipuri\", \"Bodo\", \n    \"Santhali\", \"Kashmiri\"\n]\n","size_bytes":3592},"utils/db.py":{"content":"import json\nimport os\nimport streamlit as st\nfrom datetime import datetime\nimport uuid\n\n# Data directory paths\nDATA_DIR = \"data\"\nUSERS_FILE = os.path.join(DATA_DIR, \"users.json\")\nSTORIES_DIR = os.path.join(DATA_DIR, \"stories\")\n\ndef initialize_database():\n    \"\"\"Initialize database directories and files\"\"\"\n    try:\n        # Create data directory if it doesn't exist\n        os.makedirs(DATA_DIR, exist_ok=True)\n        os.makedirs(STORIES_DIR, exist_ok=True)\n        \n        # Create users.json if it doesn't exist\n        if not os.path.exists(USERS_FILE):\n            save_users({})\n        \n        return True\n    except Exception as e:\n        st.error(f\"Failed to initialize database: {str(e)}\")\n        return False\n\ndef load_users():\n    \"\"\"Load users data from JSON file\"\"\"\n    try:\n        if os.path.exists(USERS_FILE):\n            with open(USERS_FILE, 'r', encoding='utf-8') as f:\n                return json.load(f)\n        return {}\n    except Exception as e:\n        st.error(f\"Failed to load users: {str(e)}\")\n        return {}\n\ndef save_users(users_data):\n    \"\"\"Save users data to JSON file\"\"\"\n    try:\n        with open(USERS_FILE, 'w', encoding='utf-8') as f:\n            json.dump(users_data, f, indent=2, ensure_ascii=False)\n        return True\n    except Exception as e:\n        st.error(f\"Failed to save users: {str(e)}\")\n        return False\n\ndef save_story(user_email, story_data):\n    \"\"\"\n    Save a story for a user\n    \n    Args:\n        user_email: Email of the user\n        story_data: Dictionary containing story information\n    \n    Returns:\n        tuple: (success: bool, story_id: str)\n    \"\"\"\n    try:\n        # Generate unique story ID\n        story_id = str(uuid.uuid4())\n        \n        # Add metadata to story\n        story_data.update({\n            'story_id': story_id,\n            'user_email': user_email,\n            'created_at': datetime.now().isoformat(),\n            'updated_at': datetime.now().isoformat()\n        })\n        \n        # Save story to individual file\n        story_file = os.path.join(STORIES_DIR, f\"{story_id}.json\")\n        with open(story_file, 'w', encoding='utf-8') as f:\n            json.dump(story_data, f, indent=2, ensure_ascii=False)\n        \n        # Update user's story list\n        users = load_users()\n        if user_email in users:\n            if 'stories' not in users[user_email]:\n                users[user_email]['stories'] = []\n            users[user_email]['stories'].append(story_id)\n            save_users(users)\n        \n        return True, story_id\n    except Exception as e:\n        st.error(f\"Failed to save story: {str(e)}\")\n        return False, None\n\ndef load_story(story_id):\n    \"\"\"Load a specific story by ID\"\"\"\n    try:\n        story_file = os.path.join(STORIES_DIR, f\"{story_id}.json\")\n        if os.path.exists(story_file):\n            with open(story_file, 'r', encoding='utf-8') as f:\n                return json.load(f)\n        return None\n    except Exception as e:\n        st.error(f\"Failed to load story: {str(e)}\")\n        return None\n\ndef get_user_stories(user_email):\n    \"\"\"Get all stories for a specific user\"\"\"\n    try:\n        users = load_users()\n        if user_email not in users:\n            return []\n        \n        story_ids = users[user_email].get('stories', [])\n        stories = []\n        \n        for story_id in story_ids:\n            story = load_story(story_id)\n            if story:\n                stories.append(story)\n        \n        return stories\n    except Exception as e:\n        st.error(f\"Failed to get user stories: {str(e)}\")\n        return []\n\ndef update_story(story_id, updated_data):\n    \"\"\"Update an existing story\"\"\"\n    try:\n        story = load_story(story_id)\n        if not story:\n            return False\n        \n        # Update data\n        story.update(updated_data)\n        story['updated_at'] = datetime.now().isoformat()\n        \n        # Save updated story\n        story_file = os.path.join(STORIES_DIR, f\"{story_id}.json\")\n        with open(story_file, 'w', encoding='utf-8') as f:\n            json.dump(story, f, indent=2, ensure_ascii=False)\n        \n        return True\n    except Exception as e:\n        st.error(f\"Failed to update story: {str(e)}\")\n        return False\n\ndef delete_story(story_id, user_email):\n    \"\"\"Delete a story\"\"\"\n    try:\n        # Remove story file\n        story_file = os.path.join(STORIES_DIR, f\"{story_id}.json\")\n        if os.path.exists(story_file):\n            os.remove(story_file)\n        \n        # Remove from user's story list\n        users = load_users()\n        if user_email in users and 'stories' in users[user_email]:\n            if story_id in users[user_email]['stories']:\n                users[user_email]['stories'].remove(story_id)\n                save_users(users)\n        \n        return True\n    except Exception as e:\n        st.error(f\"Failed to delete story: {str(e)}\")\n        return False\n\ndef get_all_stories():\n    \"\"\"Get ALL stories from ALL users with author information - Core Feature\"\"\"\n    try:\n        stories = []\n        users_data = load_users()\n        \n        for filename in os.listdir(STORIES_DIR):\n            if filename.endswith('.json'):\n                story_id = filename[:-5]  # Remove .json extension\n                story = load_story(story_id)\n                if story:\n                    # Add user information to story\n                    user_email = story.get('user_email')\n                    if user_email and user_email in users_data:\n                        user_info = users_data[user_email]\n                        story['user_name'] = user_info.get('name', 'Anonymous')\n                        story['user_state'] = user_info.get('state', 'Unknown')\n                        story['user_language'] = user_info.get('language', 'Unknown')\n                    else:\n                        story['user_name'] = 'Anonymous'\n                        story['user_state'] = 'Unknown'\n                        story['user_language'] = 'Unknown'\n                    \n                    stories.append(story)\n        \n        # Sort stories by creation date (newest first)\n        stories.sort(key=lambda x: x.get('created_at', ''), reverse=True)\n        return stories\n    except Exception as e:\n        st.error(f\"Failed to get all stories: {str(e)}\")\n        return []\n\ndef search_stories(query, user_email=None):\n    \"\"\"Search stories by content or title\"\"\"\n    try:\n        if user_email:\n            stories = get_user_stories(user_email)\n        else:\n            stories = get_all_stories()\n        \n        matching_stories = []\n        query_lower = query.lower()\n        \n        for story in stories:\n            # Search in title, content, festival, language\n            searchable_text = f\"{story.get('title', '')} {story.get('festival', '')} {story.get('language', '')}\"\n            \n            # Search in story sections\n            if 'sections' in story:\n                for section in story['sections']:\n                    searchable_text += f\" {section.get('title', '')} {section.get('content', '')}\"\n            \n            if query_lower in searchable_text.lower():\n                matching_stories.append(story)\n        \n        return matching_stories\n    except Exception as e:\n        st.error(f\"Failed to search stories: {str(e)}\")\n        return []\n\ndef get_database_stats():\n    \"\"\"Get database statistics\"\"\"\n    try:\n        users = load_users()\n        all_stories = get_all_stories()\n        \n        # Language distribution\n        languages = {}\n        festivals = {}\n        \n        for story in all_stories:\n            lang = story.get('language', 'Unknown')\n            languages[lang] = languages.get(lang, 0) + 1\n            \n            fest = story.get('festival', 'Unknown')\n            festivals[fest] = festivals.get(fest, 0) + 1\n        \n        return {\n            'total_users': len(users),\n            'total_stories': len(all_stories),\n            'languages': languages,\n            'festivals': festivals\n        }\n    except Exception as e:\n        st.error(f\"Failed to get database stats: {str(e)}\")\n        return {\n            'total_users': 0,\n            'total_stories': 0,\n            'languages': {},\n            'festivals': {}\n        }\n","size_bytes":8262},"utils/sample_data.py":{"content":"import json\nimport uuid\nfrom datetime import datetime\nfrom .db import save_story, save_users, load_users\n\ndef create_sample_users():\n    \"\"\"Create sample users for demo purposes\"\"\"\n    sample_users = {\n        \"priya.sharma@email.com\": {\n            \"name\": \"Priya Sharma\",\n            \"email\": \"priya.sharma@email.com\",\n            \"password\": \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\",  # \"password\"\n            \"preferred_language\": \"Hindi\",\n            \"state\": \"Rajasthan\",\n            \"created_at\": \"2024-01-15T10:30:00\",\n            \"stories\": []\n        },\n        \"rajesh.kumar@email.com\": {\n            \"name\": \"Rajesh Kumar\",\n            \"email\": \"rajesh.kumar@email.com\",\n            \"password\": \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\",  # \"password\"\n            \"preferred_language\": \"Bengali\",\n            \"state\": \"West Bengal\",\n            \"created_at\": \"2024-01-20T14:15:00\",\n            \"stories\": []\n        },\n        \"anita.patel@email.com\": {\n            \"name\": \"Anita Patel\",\n            \"email\": \"anita.patel@email.com\",\n            \"password\": \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\",  # \"password\"\n            \"preferred_language\": \"Gujarati\",\n            \"state\": \"Gujarat\",\n            \"created_at\": \"2024-02-01T09:45:00\",\n            \"stories\": []\n        },\n        \"meera.reddy@email.com\": {\n            \"name\": \"Meera Reddy\",\n            \"email\": \"meera.reddy@email.com\",\n            \"password\": \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\",  # \"password\"\n            \"preferred_language\": \"Telugu\",\n            \"state\": \"Andhra Pradesh\",\n            \"created_at\": \"2024-02-05T16:20:00\",\n            \"stories\": []\n        }\n    }\n    \n    existing_users = load_users()\n    existing_users.update(sample_users)\n    save_users(existing_users)\n    \n    return sample_users\n\ndef create_sample_stories():\n    \"\"\"Create sample festival stories\"\"\"\n    sample_stories = [\n        {\n            \"title\": \"Diwali ki Roshni - The Light of Hope\",\n            \"festival\": \"Diwali\",\n            \"language\": \"Hindi\",\n            \"story_type\": \"Family Tradition\",\n            \"num_sections\": 3,\n            \"description\": \"A heartwarming story about how Diwali brought light to our family during difficult times.\",\n            \"user_email\": \"priya.sharma@email.com\",\n            \"user_name\": \"Priya Sharma\",\n            \"input_method\": \"text\",\n            \"enhanced_story_text\": \"This is the story of how Diwali's light guided our family through the darkest of times...\",\n            \"sections\": [\n                {\n                    \"title\": \"The Dark Before the Light\",\n                    \"content\": \"It was 2019, and our family had faced many challenges. My father had lost his job, and we were struggling financially. As Diwali approached, we wondered if we could celebrate at all. The house felt darker than usual, and hope seemed distant.\",\n                    \"image_description\": \"A dimly lit traditional Indian home with worried family members sitting together, shadows cast by a single oil lamp\",\n                    \"page_number\": 1\n                },\n                {\n                    \"title\": \"Community's Embrace\",\n                    \"content\": \"On the morning of Diwali, our neighbors began arriving with sweets, rangoli colors, and warm smiles. Mrs. Gupta brought homemade ladoos, while the Agarwal family gifted us beautiful diyas. The entire community came together, reminding us that festivals are about togetherness, not just expenses.\",\n                    \"image_description\": \"Neighbors of different ages gathering in a courtyard, sharing sweets and colorful rangoli patterns, children playing with sparklers\",\n                    \"page_number\": 2\n                },\n                {\n                    \"title\": \"The Light Returns\",\n                    \"content\": \"As evening fell, our home was transformed. Hundreds of diyas flickered in the darkness, and our hearts were full once again. That Diwali taught us that the real light of the festival comes from love, community, and hope. Today, whenever someone in our neighborhood faces difficulties, we remember that Diwali lesson and reach out with open hearts.\",\n                    \"image_description\": \"A beautifully illuminated Indian home with rows of oil lamps, family members in traditional attire celebrating together, fireworks in the distant sky\",\n                    \"page_number\": 3\n                }\n            ],\n            \"images\": {},\n            \"ai_enhancements\": {\n                \"improvements_made\": [\"Enhanced emotional depth\", \"Improved narrative flow\", \"Added cultural context\"],\n                \"confidence_score\": 0.95,\n                \"cultural_notes\": \"Story beautifully captures the community spirit of Diwali celebrations\"\n            }\n        },\n        {\n            \"title\": \"Durga Puja: Mayer Ashirbad\",\n            \"festival\": \"Durga Puja\",\n            \"language\": \"Bengali\",\n            \"story_type\": \"Community Celebration\",\n            \"num_sections\": 4,\n            \"description\": \"The magical five days of Durga Puja in our Kolkata neighborhood, where tradition meets modernity.\",\n            \"user_email\": \"rajesh.kumar@email.com\",\n            \"user_name\": \"Rajesh Kumar\",\n            \"input_method\": \"text\",\n            \"enhanced_story_text\": \"Every year, as the autumn breeze carries the scent of shiuli flowers...\",\n            \"sections\": [\n                {\n                    \"title\": \"Shashthi: The Awakening\",\n                    \"content\": \"The dhak beats echo through the narrow lanes of our para as Maa Durga arrives. The pandal, crafted by local artisans over months, reveals itself in all its glory. Children in new clothes run around excitedly while elders perform the ritual awakening of the goddess. The air is thick with incense and anticipation.\",\n                    \"image_description\": \"A magnificent Bengali Durga pandal with intricate decorations, crowds of devotees in traditional attire, dhakis playing drums\",\n                    \"page_number\": 1\n                },\n                {\n                    \"title\": \"Saptami to Ashtami: Divine Celebrations\",\n                    \"content\": \"The next two days blur into a beautiful chaos of prayers, cultural programs, and endless adda. The para comes alive with young artists performing classical dances, poets reciting verses, and musicians filling the night with soulful melodies. Food stalls offer everything from puchka to traditional sweets.\",\n                    \"image_description\": \"Cultural programs on a decorated stage, young dancers in colorful costumes, families enjoying street food under festive lights\",\n                    \"page_number\": 2\n                },\n                {\n                    \"title\": \"Navami: The Grand Celebration\",\n                    \"content\": \"On Navami, the celebration reaches its peak. The entire community participates in the evening aarti, thousands of voices joining in harmony. The sindoor khela brings women together in joyful abandon, their white sarees transformed with vermillion, symbolizing the goddess's blessings.\",\n                    \"image_description\": \"Women in white sarees playing with sindoor, covering each other with vermillion, laughing and celebrating together\",\n                    \"page_number\": 3\n                },\n                {\n                    \"title\": \"Dashami: The Tearful Farewell\",\n                    \"content\": \"As Dashami arrives, tears mix with celebration. Maa Durga's immersion in the Ganges is both an ending and a promise of return. The entire para accompanies her to the river, dancing and chanting 'Dugga Mai ki Jay!' The goddess leaves, but her blessings and the memories of these five magical days remain in our hearts until next year.\",\n                    \"image_description\": \"A procession carrying Durga idol towards the river, devotees dancing and chanting, Ganga ghat with floating flowers and lamps\",\n                    \"page_number\": 4\n                }\n            ],\n            \"images\": {},\n            \"ai_enhancements\": {\n                \"improvements_made\": [\"Enhanced Bengali cultural references\", \"Improved chronological structure\", \"Added sensory details\"],\n                \"confidence_score\": 0.92,\n                \"cultural_notes\": \"Authentic portrayal of Bengali Durga Puja traditions and community involvement\"\n            }\n        },\n        {\n            \"title\": \"Navratri: Nine Nights of Divine Dance\",\n            \"festival\": \"Navratri\",\n            \"language\": \"Gujarati\",\n            \"story_type\": \"Personal Experience\",\n            \"num_sections\": 3,\n            \"description\": \"My first Navratri in Gujarat, where I discovered the true meaning of devotion through dance.\",\n            \"user_email\": \"anita.patel@email.com\",\n            \"user_name\": \"Anita Patel\",\n            \"input_method\": \"text\",\n            \"enhanced_story_text\": \"I was a newcomer to Gujarat, and Navratri was my first introduction to the state's soul...\",\n            \"sections\": [\n                {\n                    \"title\": \"The Rhythmic Welcome\",\n                    \"content\": \"As a newcomer to Ahmedabad, I was nervous about participating in Navratri. But when I heard the dhol-tasha and saw hundreds of people moving in perfect harmony to the garba steps, my feet began to move on their own. An elderly aunty grabbed my hand, smiled, and whispered, 'Aaje to aapo ne raas ramva na din che!' (Today is the day to play and celebrate!)\",\n                    \"image_description\": \"A vibrant Navratri celebration with people in colorful traditional Gujarati attire dancing garba in concentric circles\",\n                    \"page_number\": 1\n                },\n                {\n                    \"title\": \"Learning the Sacred Steps\",\n                    \"content\": \"Each night, I learned new steps and met new friends. The garba taught me patience, the dandiya taught me coordination, and the community taught me belonging. Young children would giggle as they corrected my steps, while elders shared stories of Navratris from their youth. By the fifth night, I was no longer a spectator but a participant in this divine dance.\",\n                    \"image_description\": \"People of all ages teaching and learning garba steps, children laughing, colorful dandiya sticks creating patterns in the air\",\n                    \"page_number\": 2\n                },\n                {\n                    \"title\": \"Nine Nights, One Soul\",\n                    \"content\": \"On the final night, as I danced the aarti, I understood why Navratri is called a celebration of the divine feminine. It wasn't just about the steps or the music; it was about the collective energy, the shared devotion, and the community that embraces everyone as family. Those nine nights transformed me from an outsider to a daughter of Gujarat.\",\n                    \"image_description\": \"The grand finale of Navratri with elaborate decorations, hundreds of dancers in perfect formation, Garba queen being crowned\",\n                    \"page_number\": 3\n                }\n            ],\n            \"images\": {},\n            \"ai_enhancements\": {\n                \"improvements_made\": [\"Added authentic Gujarati phrases\", \"Enhanced cultural immersion narrative\", \"Improved emotional progression\"],\n                \"confidence_score\": 0.94,\n                \"cultural_notes\": \"Beautiful representation of Gujarati hospitality and Navratri's inclusive spirit\"\n            }\n        },\n        {\n            \"title\": \"Ganesh Chaturthi: Bappa's Homecoming\",\n            \"festival\": \"Ganesh Chaturthi\",\n            \"language\": \"Telugu\",\n            \"story_type\": \"Childhood Memory\",\n            \"num_sections\": 3,\n            \"description\": \"Childhood memories of Ganesh Chaturthi in our Hyderabad colony, where Bappa brought the community together.\",\n            \"user_email\": \"meera.reddy@email.com\",\n            \"user_name\": \"Meera Reddy\",\n            \"input_method\": \"text\",\n            \"enhanced_story_text\": \"Every year in our Hyderabad colony, Ganesh Chaturthi was the most awaited festival...\",\n            \"sections\": [\n                {\n                    \"title\": \"Bappa's Grand Arrival\",\n                    \"content\": \"The whole colony would wait for weeks as uncles and aunties planned the grandest welcome for Ganesha. The pandal would be decorated with fresh marigolds and jasmine, and the most beautiful Ganesha idol would be installed with great pomp. As children, we would compete to be the first to seek Bappa's blessings and receive the coveted modak prasadam.\",\n                    \"image_description\": \"A beautifully decorated Ganesha pandal with a magnificent idol, children and adults offering prayers, fresh flower garlands\",\n                    \"page_number\": 1\n                },\n                {\n                    \"title\": \"Ten Days of Joy\",\n                    \"content\": \"For ten magical days, our colony transformed into a cultural hub. Every evening brought new performances - classical dances, devotional songs, and skits about Ganesha's stories. The ladies would organize cooking competitions, making different varieties of modaks and undrallu. We children would participate in rangoli competitions and quiz contests about Lord Ganesha.\",\n                    \"image_description\": \"Community cultural programs with children performing dances, women displaying various traditional sweets, colorful rangoli patterns\",\n                    \"page_number\": 2\n                },\n                {\n                    \"title\": \"The Tearful Farewell\",\n                    \"content\": \"On Anant Chaturdashi, the entire colony would accompany Bappa to the Hussain Sagar lake for visarjan. The procession would be filled with drums, dancing, and chants of 'Ganpati Bappa Morya!' As we watched our beloved Ganesha disappear into the waters, we would cry and promise to bring him back next year with even more love and devotion.\",\n                    \"image_description\": \"A grand procession towards a lake, people carrying Ganesha idol, devotees dancing and celebrating, lake with floating flowers\",\n                    \"page_number\": 3\n                }\n            ],\n            \"images\": {},\n            \"ai_enhancements\": {\n                \"improvements_made\": [\"Enhanced childhood perspective\", \"Added Telugu cultural elements\", \"Improved emotional storytelling\"],\n                \"confidence_score\": 0.93,\n                \"cultural_notes\": \"Captures the essence of community Ganesh celebrations in Telugu regions\"\n            }\n        }\n    ]\n    \n    # Save each story\n    for story_data in sample_stories:\n        user_email = story_data[\"user_email\"]\n        success, story_id = save_story(user_email, story_data)\n        if success:\n            print(f\"Sample story '{story_data['title']}' created with ID: {story_id}\")\n    \n    return sample_stories\n\ndef initialize_sample_data():\n    \"\"\"Initialize the platform with sample users and stories\"\"\"\n    try:\n        # Create sample users\n        users = create_sample_users()\n        print(f\"Created {len(users)} sample users\")\n        \n        # Create sample stories\n        stories = create_sample_stories()\n        print(f\"Created {len(stories)} sample stories\")\n        \n        return True, f\"Successfully created {len(users)} users and {len(stories)} stories\"\n    \n    except Exception as e:\n        return False, f\"Failed to create sample data: {str(e)}\"\n\n# Sample festival data for quick story creation\nFESTIVAL_TEMPLATES = {\n    \"Diwali\": {\n        \"description\": \"Festival of lights celebrating the victory of good over evil\",\n        \"typical_elements\": [\"diyas\", \"rangoli\", \"fireworks\", \"sweets\", \"family gatherings\"],\n        \"emotions\": [\"joy\", \"hope\", \"togetherness\", \"prosperity\"],\n        \"traditions\": [\"lighting lamps\", \"exchanging gifts\", \"sharing sweets\", \"family prayers\"]\n    },\n    \"Holi\": {\n        \"description\": \"Festival of colors celebrating spring and love\",\n        \"typical_elements\": [\"colors\", \"water balloons\", \"music\", \"dance\", \"bhang\"],\n        \"emotions\": [\"joy\", \"playfulness\", \"love\", \"unity\"],\n        \"traditions\": [\"playing with colors\", \"community celebrations\", \"special foods\", \"folk songs\"]\n    },\n    \"Eid\": {\n        \"description\": \"Festival of breaking the fast, celebrating compassion and community\",\n        \"typical_elements\": [\"moon sighting\", \"special prayers\", \"new clothes\", \"feasts\"],\n        \"emotions\": [\"gratitude\", \"compassion\", \"community\", \"joy\"],\n        \"traditions\": [\"morning prayers\", \"charity\", \"family feasts\", \"gift giving\"]\n    },\n    \"Christmas\": {\n        \"description\": \"Celebration of love, giving, and family togetherness\",\n        \"typical_elements\": [\"Christmas tree\", \"carols\", \"gifts\", \"family dinner\"],\n        \"emotions\": [\"love\", \"generosity\", \"peace\", \"family bonding\"],\n        \"traditions\": [\"midnight mass\", \"gift exchange\", \"carol singing\", \"special meals\"]\n    },\n    \"Onam\": {\n        \"description\": \"Harvest festival of Kerala celebrating King Mahabali's return\",\n        \"typical_elements\": [\"pookalam\", \"sadhya\", \"boat races\", \"traditional dances\"],\n        \"emotions\": [\"prosperity\", \"cultural pride\", \"community harmony\"],\n        \"traditions\": [\"flower carpets\", \"traditional feast\", \"cultural programs\", \"boat races\"]\n    }\n}","size_bytes":17390},"utils/speech_to_text.py":{"content":"import streamlit as st\nimport tempfile\nimport os\nfrom openai import OpenAI\n\ndef transcribe_audio_file(audio_file):\n    \"\"\"\n    Transcribe audio file using OpenAI Whisper\n    \n    Args:\n        audio_file: Streamlit uploaded file object\n    \n    Returns:\n        str: Transcribed text\n    \"\"\"\n    try:\n        # Check if API key is available\n        api_key = os.environ.get(\"OPENAI_API_KEY\")\n        if not api_key:\n            raise Exception(\"OpenAI API key not configured. Please add your API key to continue.\")\n        \n        client = OpenAI(api_key=api_key)\n        \n        # Save uploaded file to temporary file\n        with tempfile.NamedTemporaryFile(delete=False, suffix=f\".{audio_file.name.split('.')[-1]}\") as tmp_file:\n            tmp_file.write(audio_file.getvalue())\n            tmp_file_path = tmp_file.name\n        \n        try:\n            # Transcribe audio using OpenAI Whisper\n            with open(tmp_file_path, \"rb\") as audio:\n                transcript = client.audio.transcriptions.create(\n                    model=\"whisper-1\",\n                    file=audio,\n                    language=\"hi\"  # Hindi, can be made dynamic based on user preference\n                )\n            \n            return transcript.text\n            \n        finally:\n            # Clean up temporary file\n            if os.path.exists(tmp_file_path):\n                os.unlink(tmp_file_path)\n                \n    except Exception as e:\n        raise Exception(f\"Transcription failed: {str(e)}\")\n\ndef display_transcription_ui():\n    \"\"\"Display UI for audio transcription - kept for backward compatibility\"\"\"\n    st.info(\"üé§ Use the voice input option in the upload flow for audio transcription.\")","size_bytes":1704},"utils/text_cleaner.py":{"content":"import streamlit as st\nimport json\nimport os\nfrom openai import OpenAI\nfrom .api_manager import api_manager\n\n# Initialize OpenAI client with managed API key\ndef get_openai_client():\n    \"\"\"Get OpenAI client with current API key\"\"\"\n    current_key = api_manager.get_current_key()\n    if not current_key:\n        raise Exception(\"No API key available\")\n    return OpenAI(api_key=current_key[\"key\"])\n\ndef clean_and_correct_text(text, language=\"Hindi\", context=\"festival story\"):\n    \"\"\"\n    Clean and correct text using OpenAI GPT-4o\n    \n    Args:\n        text: Raw text to be cleaned\n        language: Language of the text\n        context: Context for better correction (e.g., \"festival story\")\n    \n    Returns:\n        tuple: (success: bool, result: dict)\n    \"\"\"\n    try:\n        system_prompt = f\"\"\"You are an expert in {language} language and Indian cultural stories. \n        Your task is to clean and correct the following {context} text while:\n        1. Preserving the original meaning and cultural authenticity\n        2. Correcting grammar, spelling, and sentence structure\n        3. Maintaining the storytelling tone and emotional essence\n        4. Adding appropriate punctuation and formatting\n        5. Ensuring cultural sensitivity and accuracy\n        \n        Please respond with JSON in this exact format:\n        {{\n            \"cleaned_text\": \"the corrected and cleaned text\",\n            \"improvements_made\": [\"list of improvements made\"],\n            \"confidence_score\": 0.95,\n            \"cultural_notes\": \"any important cultural context preserved\"\n        }}\"\"\"\n        \n        user_prompt = f\"Please clean and correct this {language} {context} text:\\n\\n{text}\"\n        \n        # Show API usage status before making request\n        api_manager.show_usage_status()\n        \n        # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n        # do not change this unless explicitly requested by the user\n        client = get_openai_client()\n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": user_prompt}\n            ],\n            response_format={\"type\": \"json_object\"},\n            max_tokens=2000\n        )\n        \n        content = response.choices[0].message.content\n        if content:\n            result = json.loads(content)\n            return True, result\n        else:\n            return False, {\"error\": \"No content in response\"}\n    \n    except Exception as e:\n        return False, {\"error\": f\"Text cleaning failed: {str(e)}\"}\n\ndef organize_story_sections(text, num_sections=3, language=\"Hindi\"):\n    \"\"\"\n    Organize story into sections/pages for virtual book\n    \n    Args:\n        text: Cleaned story text\n        num_sections: Number of sections to create\n        language: Language of the story\n    \n    Returns:\n        tuple: (success: bool, result: dict)\n    \"\"\"\n    try:\n        system_prompt = f\"\"\"You are an expert storyteller and editor. \n        Your task is to organize the following {language} story into {num_sections} meaningful sections/pages for a virtual book.\n        \n        Each section should:\n        1. Have a natural flow and narrative arc\n        2. End at a good stopping point\n        3. Be roughly equal in length\n        4. Have a descriptive title\n        5. Include a brief description for image generation\n        \n        Please respond with JSON in this exact format:\n        {{\n            \"sections\": [\n                {{\n                    \"title\": \"Section title\",\n                    \"content\": \"Section content text\",\n                    \"image_description\": \"Description for generating relevant image\",\n                    \"page_number\": 1\n                }}\n            ],\n            \"story_title\": \"Overall story title\",\n            \"story_summary\": \"Brief summary of the complete story\"\n        }}\"\"\"\n        \n        user_prompt = f\"Please organize this {language} story into {num_sections} sections:\\n\\n{text}\"\n        \n        # Show API usage status\n        api_manager.show_usage_status()\n        \n        # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n        # do not change this unless explicitly requested by the user\n        client = get_openai_client()\n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": user_prompt}\n            ],\n            response_format={\"type\": \"json_object\"},\n            max_tokens=3000\n        )\n        \n        content = response.choices[0].message.content\n        if content:\n            result = json.loads(content)\n            # Record successful API usage\n            api_manager.record_usage(success=True)\n            return True, result\n        else:\n            return False, {\"error\": \"No content in response\"}\n    \n    except Exception as e:\n        error_msg = str(e)\n        # Record failed API usage\n        api_manager.record_usage(success=False)\n        \n        # Handle rate limit errors\n        if \"429\" in error_msg:\n            if api_manager.handle_rate_limit_error():\n                return False, {\"error\": \"Rate limit reached. Switched to backup API key. Please try again.\"}\n            return False, {\"error\": \"Rate limit reached. Please wait before trying again.\"}\n        \n        return False, {\"error\": f\"Story organization failed: {error_msg}\"}\n\ndef generate_image_description(story_content, cultural_context=\"Indian festival\"):\n    \"\"\"\n    Generate detailed image description for story illustration\n    \n    Args:\n        story_content: Content of the story section\n        cultural_context: Cultural context for accurate representation\n    \n    Returns:\n        tuple: (success: bool, description: str)\n    \"\"\"\n    try:\n        system_prompt = f\"\"\"You are an expert in Indian art and cultural visualization. \n        Create a detailed, culturally accurate image description for illustrating this {cultural_context} story.\n        \n        The description should:\n        1. Be culturally authentic and respectful\n        2. Include appropriate traditional elements\n        3. Specify colors, clothing, settings typical of Indian festivals\n        4. Avoid stereotypes while maintaining cultural accuracy\n        5. Be suitable for family-friendly content\n        \n        Keep the description under 200 words and focus on visual elements that would make a beautiful illustration.\"\"\"\n        \n        user_prompt = f\"Create an image description for this story content:\\n\\n{story_content}\"\n        \n        # Show API usage status\n        api_manager.show_usage_status()\n        \n        # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024.\n        # do not change this unless explicitly requested by the user\n        client = get_openai_client()\n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": user_prompt}\n            ],\n            max_tokens=500\n        )\n        \n        # Record successful API usage\n        api_manager.record_usage(success=True)\n        return True, response.choices[0].message.content\n    \n    except Exception as e:\n        error_msg = str(e)\n        # Record failed API usage\n        api_manager.record_usage(success=False)\n        \n        # Handle rate limit errors\n        if \"429\" in error_msg:\n            if api_manager.handle_rate_limit_error():\n                return False, \"Rate limit reached. Switched to backup API key. Please try again.\"\n            return False, \"Rate limit reached. Please wait before trying again.\"\n        \n        return False, f\"Image description generation failed: {error_msg}\"\n\ndef display_text_cleaning_ui(input_text, language=\"Hindi\"):\n    \"\"\"\n    Display UI for text cleaning and correction\n    \n    Args:\n        input_text: Text to be cleaned\n        language: Language of the text\n    \n    Returns:\n        dict: Cleaned text result or None\n    \"\"\"\n    if not input_text or not input_text.strip():\n        st.warning(\"Please provide text to clean and correct.\")\n        return None\n    \n    st.subheader(\"ü§ñ AI Text Enhancement\")\n    \n    # Show original text\n    with st.expander(\"üìù Original Text\", expanded=False):\n        st.text_area(\"Original:\", value=input_text, height=150, disabled=True)\n    \n    # Language and context selection\n    col1, col2 = st.columns(2)\n    with col1:\n        selected_language = st.selectbox(\n            \"Language:\",\n            [\"Hindi\", \"English\", \"Bengali\", \"Telugu\", \"Marathi\", \"Tamil\", \"Gujarati\", \"Urdu\", \"Kannada\", \"Malayalam\"],\n            index=0 if language == \"Hindi\" else ([\"Hindi\", \"English\", \"Bengali\", \"Telugu\", \"Marathi\", \"Tamil\", \"Gujarati\", \"Urdu\", \"Kannada\", \"Malayalam\"].index(language) if language in [\"Hindi\", \"English\", \"Bengali\", \"Telugu\", \"Marathi\", \"Tamil\", \"Gujarati\", \"Urdu\", \"Kannada\", \"Malayalam\"] else 0)\n        )\n    \n    with col2:\n        story_context = st.selectbox(\n            \"Story Type:\",\n            [\"festival story\", \"cultural story\", \"traditional tale\", \"family story\", \"religious story\"],\n            index=0\n        )\n    \n    # Clean text button\n    if st.button(\"‚ú® Clean & Enhance Text\", type=\"primary\"):\n        with st.spinner(\"Enhancing your story with AI... Please wait.\"):\n            success, result = clean_and_correct_text(input_text, selected_language, story_context)\n            \n            if success and \"cleaned_text\" in result:\n                st.success(\"‚úÖ Text enhancement completed!\")\n                \n                # Display cleaned text\n                cleaned_text = st.text_area(\n                    \"Enhanced Text:\",\n                    value=result[\"cleaned_text\"],\n                    height=200,\n                    key=\"cleaned_text_output\",\n                    help=\"You can further edit this enhanced text if needed\"\n                )\n                \n                # Show improvements made\n                if \"improvements_made\" in result and result[\"improvements_made\"]:\n                    with st.expander(\"üîß Improvements Made\", expanded=False):\n                        for improvement in result[\"improvements_made\"]:\n                            st.write(f\"‚Ä¢ {improvement}\")\n                \n                # Show confidence score\n                if \"confidence_score\" in result:\n                    st.metric(\"AI Confidence\", f\"{result['confidence_score'] * 100:.1f}%\")\n                \n                # Show cultural notes\n                if \"cultural_notes\" in result and result[\"cultural_notes\"]:\n                    with st.expander(\"üèõÔ∏è Cultural Notes\", expanded=False):\n                        st.write(result[\"cultural_notes\"])\n                \n                return result\n            else:\n                error_msg = result.get(\"error\", \"Unknown error occurred\") if isinstance(result, dict) else str(result)\n                st.error(f\"‚ùå {error_msg}\")\n                return None\n    \n    return None\n","size_bytes":11222}},"version":1}